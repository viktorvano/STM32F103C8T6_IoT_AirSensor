
STM32F103C8T6_IoT_AirSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004030  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800413c  0800413c  0000513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800441c  0800441c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800441c  0800441c  0000541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004424  08004424  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004424  08004424  00005424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004428  08004428  00005428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800442c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a84  2000005c  08004488  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae0  08004488  00006ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f839  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022dc  00000000  00000000  000158be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00017ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c34  00000000  00000000  00018b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018701  00000000  00000000  0001973c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d99  00000000  00000000  00031e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4dc  00000000  00000000  00044bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d20b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000463c  00000000  00000000  000d20f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d6734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004124 	.word	0x08004124

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004124 	.word	0x08004124

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000160:	f3bf 8f4f 	dsb	sy
}
 8000164:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000166:	4b06      	ldr	r3, [pc, #24]	@ (8000180 <__NVIC_SystemReset+0x24>)
 8000168:	68db      	ldr	r3, [r3, #12]
 800016a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800016e:	4904      	ldr	r1, [pc, #16]	@ (8000180 <__NVIC_SystemReset+0x24>)
 8000170:	4b04      	ldr	r3, [pc, #16]	@ (8000184 <__NVIC_SystemReset+0x28>)
 8000172:	4313      	orrs	r3, r2
 8000174:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000176:	f3bf 8f4f 	dsb	sy
}
 800017a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800017c:	bf00      	nop
 800017e:	e7fd      	b.n	800017c <__NVIC_SystemReset+0x20>
 8000180:	e000ed00 	.word	0xe000ed00
 8000184:	05fa0004 	.word	0x05fa0004

08000188 <ESP_RESET>:
uint8_t buffer[2000];
uint16_t buffer_index = 0, timeout = 0, messageHandlerFlag = 0, no_activity_counter = 0;
ESP_State esp_state = ESP_Disconnected;

void ESP_RESET()
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2110      	movs	r1, #16
 8000190:	480b      	ldr	r0, [pc, #44]	@ (80001c0 <ESP_RESET+0x38>)
 8000192:	f001 fac1 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RESET_GPIO_Port, ESP_RESET_Pin, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2108      	movs	r1, #8
 800019a:	4809      	ldr	r0, [pc, #36]	@ (80001c0 <ESP_RESET+0x38>)
 800019c:	f001 fabc 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 80001a0:	201e      	movs	r0, #30
 80001a2:	f000 ff51 	bl	8001048 <HAL_Delay>
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_SET);
 80001a6:	2201      	movs	r2, #1
 80001a8:	2110      	movs	r1, #16
 80001aa:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <ESP_RESET+0x38>)
 80001ac:	f001 fab4 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RESET_GPIO_Port, ESP_RESET_Pin, GPIO_PIN_SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2108      	movs	r1, #8
 80001b4:	4802      	ldr	r0, [pc, #8]	@ (80001c0 <ESP_RESET+0x38>)
 80001b6:	f001 faaf 	bl	8001718 <HAL_GPIO_WritePin>
}
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <ESP_Server_Init>:

void ESP_Server_Init()
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	ESP_RESET();
 80001c8:	f7ff ffde 	bl	8000188 <ESP_RESET>
	HAL_Delay(400);
 80001cc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80001d0:	f000 ff3a 	bl	8001048 <HAL_Delay>
	ESP_Clear_Buffer();
 80001d4:	f000 f852 	bl	800027c <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+RST\r\n", strlen("AT+RST\r\n"), 100);
 80001d8:	2364      	movs	r3, #100	@ 0x64
 80001da:	2208      	movs	r2, #8
 80001dc:	4920      	ldr	r1, [pc, #128]	@ (8000260 <ESP_Server_Init+0x9c>)
 80001de:	4821      	ldr	r0, [pc, #132]	@ (8000264 <ESP_Server_Init+0xa0>)
 80001e0:	f002 fc94 	bl	8002b0c <HAL_UART_Transmit>
	HAL_Delay(400);
 80001e4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80001e8:	f000 ff2e 	bl	8001048 <HAL_Delay>
	ESP_Clear_Buffer();
 80001ec:	f000 f846 	bl	800027c <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"), 100);
 80001f0:	2364      	movs	r3, #100	@ 0x64
 80001f2:	220d      	movs	r2, #13
 80001f4:	491c      	ldr	r1, [pc, #112]	@ (8000268 <ESP_Server_Init+0xa4>)
 80001f6:	481b      	ldr	r0, [pc, #108]	@ (8000264 <ESP_Server_Init+0xa0>)
 80001f8:	f002 fc88 	bl	8002b0c <HAL_UART_Transmit>
	HAL_Delay(400);
 80001fc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000200:	f000 ff22 	bl	8001048 <HAL_Delay>
	ESP_Clear_Buffer();
 8000204:	f000 f83a 	bl	800027c <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CWDHCP=1,1\r\n", strlen("AT+CWDHCP=1,1\r\n"), 100);
 8000208:	2364      	movs	r3, #100	@ 0x64
 800020a:	220f      	movs	r2, #15
 800020c:	4917      	ldr	r1, [pc, #92]	@ (800026c <ESP_Server_Init+0xa8>)
 800020e:	4815      	ldr	r0, [pc, #84]	@ (8000264 <ESP_Server_Init+0xa0>)
 8000210:	f002 fc7c 	bl	8002b0c <HAL_UART_Transmit>
	HAL_Delay(400);
 8000214:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000218:	f000 ff16 	bl	8001048 <HAL_Delay>
	ESP_Clear_Buffer();
 800021c:	f000 f82e 	bl	800027c <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CIPMUX=1\r\n", strlen("AT+CIPMUX=1\r\n"), 100);
 8000220:	2364      	movs	r3, #100	@ 0x64
 8000222:	220d      	movs	r2, #13
 8000224:	4912      	ldr	r1, [pc, #72]	@ (8000270 <ESP_Server_Init+0xac>)
 8000226:	480f      	ldr	r0, [pc, #60]	@ (8000264 <ESP_Server_Init+0xa0>)
 8000228:	f002 fc70 	bl	8002b0c <HAL_UART_Transmit>
	HAL_Delay(400);
 800022c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000230:	f000 ff0a 	bl	8001048 <HAL_Delay>
	ESP_Clear_Buffer();
 8000234:	f000 f822 	bl	800027c <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CIPSERVER=1,80\r\n", strlen("AT+CIPSERVER=1,80\r\n"), 100);
 8000238:	2364      	movs	r3, #100	@ 0x64
 800023a:	2213      	movs	r2, #19
 800023c:	490d      	ldr	r1, [pc, #52]	@ (8000274 <ESP_Server_Init+0xb0>)
 800023e:	4809      	ldr	r0, [pc, #36]	@ (8000264 <ESP_Server_Init+0xa0>)
 8000240:	f002 fc64 	bl	8002b0c <HAL_UART_Transmit>
	HAL_Delay(400);
 8000244:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000248:	f000 fefe 	bl	8001048 <HAL_Delay>
	ESP_Clear_Buffer();
 800024c:	f000 f816 	bl	800027c <ESP_Clear_Buffer>

	//Change your WiFi SSID credentials below
	HAL_UART_Transmit(&huart2, (uint8_t*)WiFi_Credentials, strlen(WiFi_Credentials), 100);
 8000250:	2364      	movs	r3, #100	@ 0x64
 8000252:	2224      	movs	r2, #36	@ 0x24
 8000254:	4908      	ldr	r1, [pc, #32]	@ (8000278 <ESP_Server_Init+0xb4>)
 8000256:	4803      	ldr	r0, [pc, #12]	@ (8000264 <ESP_Server_Init+0xa0>)
 8000258:	f002 fc58 	bl	8002b0c <HAL_UART_Transmit>
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	0800413c 	.word	0x0800413c
 8000264:	20000948 	.word	0x20000948
 8000268:	08004148 	.word	0x08004148
 800026c:	08004158 	.word	0x08004158
 8000270:	08004168 	.word	0x08004168
 8000274:	08004178 	.word	0x08004178
 8000278:	0800418c 	.word	0x0800418c

0800027c <ESP_Clear_Buffer>:

void ESP_Clear_Buffer()
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	memset(buffer, 0, 2000);
 8000280:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000284:	2100      	movs	r1, #0
 8000286:	4804      	ldr	r0, [pc, #16]	@ (8000298 <ESP_Clear_Buffer+0x1c>)
 8000288:	f003 fabc 	bl	8003804 <memset>
	buffer_index = 0;
 800028c:	4b03      	ldr	r3, [pc, #12]	@ (800029c <ESP_Clear_Buffer+0x20>)
 800028e:	2200      	movs	r2, #0
 8000290:	801a      	strh	r2, [r3, #0]
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	2000007c 	.word	0x2000007c
 800029c:	2000084c 	.word	0x2000084c

080002a0 <string_compare>:

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b087      	sub	sp, #28
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	4613      	mov	r3, r2
 80002ac:	80fb      	strh	r3, [r7, #6]
	 uint16_t comVAR=0, i;
 80002ae:	2300      	movs	r3, #0
 80002b0:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 80002b2:	2300      	movs	r3, #0
 80002b4:	82bb      	strh	r3, [r7, #20]
 80002b6:	e012      	b.n	80002de <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 80002b8:	8abb      	ldrh	r3, [r7, #20]
 80002ba:	68fa      	ldr	r2, [r7, #12]
 80002bc:	4413      	add	r3, r2
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	8abb      	ldrh	r3, [r7, #20]
 80002c2:	68b9      	ldr	r1, [r7, #8]
 80002c4:	440b      	add	r3, r1
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d103      	bne.n	80002d4 <string_compare+0x34>
	   	  		  comVAR++;
 80002cc:	8afb      	ldrh	r3, [r7, #22]
 80002ce:	3301      	adds	r3, #1
 80002d0:	82fb      	strh	r3, [r7, #22]
 80002d2:	e001      	b.n	80002d8 <string_compare+0x38>
	   	  	  else comVAR=0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 80002d8:	8abb      	ldrh	r3, [r7, #20]
 80002da:	3301      	adds	r3, #1
 80002dc:	82bb      	strh	r3, [r7, #20]
 80002de:	8aba      	ldrh	r2, [r7, #20]
 80002e0:	88fb      	ldrh	r3, [r7, #6]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d3e8      	bcc.n	80002b8 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 80002e6:	8afa      	ldrh	r2, [r7, #22]
 80002e8:	88fb      	ldrh	r3, [r7, #6]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d101      	bne.n	80002f2 <string_compare+0x52>
		 	return 1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	e000      	b.n	80002f4 <string_compare+0x54>
	 else 	return 0;
 80002f2:	2300      	movs	r3, #0
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	371c      	adds	r7, #28
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr

080002fe <string_contains>:

int string_contains(char bufferArray[], char searchedString[], uint16_t length)
{
 80002fe:	b590      	push	{r4, r7, lr}
 8000300:	b087      	sub	sp, #28
 8000302:	af00      	add	r7, sp, #0
 8000304:	60f8      	str	r0, [r7, #12]
 8000306:	60b9      	str	r1, [r7, #8]
 8000308:	4613      	mov	r3, r2
 800030a:	80fb      	strh	r3, [r7, #6]
	uint8_t result=0;
 800030c:	2300      	movs	r3, #0
 800030e:	757b      	strb	r3, [r7, #21]
	for(uint16_t i=0; i<length; i++)
 8000310:	2300      	movs	r3, #0
 8000312:	82fb      	strh	r3, [r7, #22]
 8000314:	e016      	b.n	8000344 <string_contains+0x46>
	{
		result = string_compare(&bufferArray[i], &searchedString[0], strlen(searchedString));
 8000316:	8afb      	ldrh	r3, [r7, #22]
 8000318:	68fa      	ldr	r2, [r7, #12]
 800031a:	18d4      	adds	r4, r2, r3
 800031c:	68b8      	ldr	r0, [r7, #8]
 800031e:	f7ff ff15 	bl	800014c <strlen>
 8000322:	4603      	mov	r3, r0
 8000324:	b29b      	uxth	r3, r3
 8000326:	461a      	mov	r2, r3
 8000328:	68b9      	ldr	r1, [r7, #8]
 800032a:	4620      	mov	r0, r4
 800032c:	f7ff ffb8 	bl	80002a0 <string_compare>
 8000330:	4603      	mov	r3, r0
 8000332:	757b      	strb	r3, [r7, #21]
		if(result == 1)
 8000334:	7d7b      	ldrb	r3, [r7, #21]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d101      	bne.n	800033e <string_contains+0x40>
			return i;
 800033a:	8afb      	ldrh	r3, [r7, #22]
 800033c:	e008      	b.n	8000350 <string_contains+0x52>
	for(uint16_t i=0; i<length; i++)
 800033e:	8afb      	ldrh	r3, [r7, #22]
 8000340:	3301      	adds	r3, #1
 8000342:	82fb      	strh	r3, [r7, #22]
 8000344:	8afa      	ldrh	r2, [r7, #22]
 8000346:	88fb      	ldrh	r3, [r7, #6]
 8000348:	429a      	cmp	r2, r3
 800034a:	d3e4      	bcc.n	8000316 <string_contains+0x18>
	}
	return -1;
 800034c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000350:	4618      	mov	r0, r3
 8000352:	371c      	adds	r7, #28
 8000354:	46bd      	mov	sp, r7
 8000356:	bd90      	pop	{r4, r7, pc}

08000358 <messageHandler>:

void messageHandler()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
	__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 800035e:	4b5d      	ldr	r3, [pc, #372]	@ (80004d4 <messageHandler+0x17c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	4b5b      	ldr	r3, [pc, #364]	@ (80004d4 <messageHandler+0x17c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f022 0220 	bic.w	r2, r2, #32
 800036c:	60da      	str	r2, [r3, #12]
	int position = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	607b      	str	r3, [r7, #4]
	if((position = string_contains((char*)buffer, ",CONNECT\r\n", buffer_index)) != -1)
 8000372:	4b59      	ldr	r3, [pc, #356]	@ (80004d8 <messageHandler+0x180>)
 8000374:	881b      	ldrh	r3, [r3, #0]
 8000376:	461a      	mov	r2, r3
 8000378:	4958      	ldr	r1, [pc, #352]	@ (80004dc <messageHandler+0x184>)
 800037a:	4859      	ldr	r0, [pc, #356]	@ (80004e0 <messageHandler+0x188>)
 800037c:	f7ff ffbf 	bl	80002fe <string_contains>
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000388:	d002      	beq.n	8000390 <messageHandler+0x38>
	{
		ESP_Clear_Buffer();
 800038a:	f7ff ff77 	bl	800027c <ESP_Clear_Buffer>
 800038e:	e093      	b.n	80004b8 <messageHandler+0x160>
	}else if((position = string_contains((char*)buffer, "GET", buffer_index)) != -1)//send Web page HTML code
 8000390:	4b51      	ldr	r3, [pc, #324]	@ (80004d8 <messageHandler+0x180>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	461a      	mov	r2, r3
 8000396:	4953      	ldr	r1, [pc, #332]	@ (80004e4 <messageHandler+0x18c>)
 8000398:	4851      	ldr	r0, [pc, #324]	@ (80004e0 <messageHandler+0x188>)
 800039a:	f7ff ffb0 	bl	80002fe <string_contains>
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003a6:	d002      	beq.n	80003ae <messageHandler+0x56>
	{
		sendData();
 80003a8:	f000 f8b0 	bl	800050c <sendData>
 80003ac:	e084      	b.n	80004b8 <messageHandler+0x160>
	}else if(string_contains((char*)buffer, "CWJAP", buffer_index) != -1
 80003ae:	4b4a      	ldr	r3, [pc, #296]	@ (80004d8 <messageHandler+0x180>)
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	461a      	mov	r2, r3
 80003b4:	494c      	ldr	r1, [pc, #304]	@ (80004e8 <messageHandler+0x190>)
 80003b6:	484a      	ldr	r0, [pc, #296]	@ (80004e0 <messageHandler+0x188>)
 80003b8:	f7ff ffa1 	bl	80002fe <string_contains>
 80003bc:	4603      	mov	r3, r0
 80003be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003c2:	d035      	beq.n	8000430 <messageHandler+0xd8>
			&& (string_contains((char*)buffer, "FAIL", buffer_index) != -1
 80003c4:	4b44      	ldr	r3, [pc, #272]	@ (80004d8 <messageHandler+0x180>)
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	461a      	mov	r2, r3
 80003ca:	4948      	ldr	r1, [pc, #288]	@ (80004ec <messageHandler+0x194>)
 80003cc:	4844      	ldr	r0, [pc, #272]	@ (80004e0 <messageHandler+0x188>)
 80003ce:	f7ff ff96 	bl	80002fe <string_contains>
 80003d2:	4603      	mov	r3, r0
 80003d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003d8:	d115      	bne.n	8000406 <messageHandler+0xae>
			|| string_contains((char*)buffer, "No AP", buffer_index) != -1
 80003da:	4b3f      	ldr	r3, [pc, #252]	@ (80004d8 <messageHandler+0x180>)
 80003dc:	881b      	ldrh	r3, [r3, #0]
 80003de:	461a      	mov	r2, r3
 80003e0:	4943      	ldr	r1, [pc, #268]	@ (80004f0 <messageHandler+0x198>)
 80003e2:	483f      	ldr	r0, [pc, #252]	@ (80004e0 <messageHandler+0x188>)
 80003e4:	f7ff ff8b 	bl	80002fe <string_contains>
 80003e8:	4603      	mov	r3, r0
 80003ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ee:	d10a      	bne.n	8000406 <messageHandler+0xae>
			|| string_contains((char*)buffer, "WIFI DISCONNECT", buffer_index) != -1)
 80003f0:	4b39      	ldr	r3, [pc, #228]	@ (80004d8 <messageHandler+0x180>)
 80003f2:	881b      	ldrh	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	493f      	ldr	r1, [pc, #252]	@ (80004f4 <messageHandler+0x19c>)
 80003f8:	4839      	ldr	r0, [pc, #228]	@ (80004e0 <messageHandler+0x188>)
 80003fa:	f7ff ff80 	bl	80002fe <string_contains>
 80003fe:	4603      	mov	r3, r0
 8000400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000404:	d014      	beq.n	8000430 <messageHandler+0xd8>
			&& !(string_contains((char*)buffer, "WIFI CONNECTED", buffer_index) != -1))
 8000406:	4b34      	ldr	r3, [pc, #208]	@ (80004d8 <messageHandler+0x180>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	461a      	mov	r2, r3
 800040c:	493a      	ldr	r1, [pc, #232]	@ (80004f8 <messageHandler+0x1a0>)
 800040e:	4834      	ldr	r0, [pc, #208]	@ (80004e0 <messageHandler+0x188>)
 8000410:	f7ff ff75 	bl	80002fe <string_contains>
 8000414:	4603      	mov	r3, r0
 8000416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800041a:	d109      	bne.n	8000430 <messageHandler+0xd8>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)WiFi_Credentials, strlen(WiFi_Credentials), 100);
 800041c:	2364      	movs	r3, #100	@ 0x64
 800041e:	2224      	movs	r2, #36	@ 0x24
 8000420:	4936      	ldr	r1, [pc, #216]	@ (80004fc <messageHandler+0x1a4>)
 8000422:	482c      	ldr	r0, [pc, #176]	@ (80004d4 <messageHandler+0x17c>)
 8000424:	f002 fb72 	bl	8002b0c <HAL_UART_Transmit>
		esp_state = ESP_Disconnected;
 8000428:	4b35      	ldr	r3, [pc, #212]	@ (8000500 <messageHandler+0x1a8>)
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
 800042e:	e043      	b.n	80004b8 <messageHandler+0x160>
	}else if(string_contains((char*)buffer, "WIFI CONNECTED", buffer_index) != -1)
 8000430:	4b29      	ldr	r3, [pc, #164]	@ (80004d8 <messageHandler+0x180>)
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	461a      	mov	r2, r3
 8000436:	4930      	ldr	r1, [pc, #192]	@ (80004f8 <messageHandler+0x1a0>)
 8000438:	4829      	ldr	r0, [pc, #164]	@ (80004e0 <messageHandler+0x188>)
 800043a:	f7ff ff60 	bl	80002fe <string_contains>
 800043e:	4603      	mov	r3, r0
 8000440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000444:	d003      	beq.n	800044e <messageHandler+0xf6>
	{
		esp_state = ESP_Connected;
 8000446:	4b2e      	ldr	r3, [pc, #184]	@ (8000500 <messageHandler+0x1a8>)
 8000448:	2201      	movs	r2, #1
 800044a:	701a      	strb	r2, [r3, #0]
 800044c:	e034      	b.n	80004b8 <messageHandler+0x160>
	}else if(string_contains((char*)buffer, "boot mode:", buffer_index) != -1)
 800044e:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <messageHandler+0x180>)
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	461a      	mov	r2, r3
 8000454:	492b      	ldr	r1, [pc, #172]	@ (8000504 <messageHandler+0x1ac>)
 8000456:	4822      	ldr	r0, [pc, #136]	@ (80004e0 <messageHandler+0x188>)
 8000458:	f7ff ff51 	bl	80002fe <string_contains>
 800045c:	4603      	mov	r3, r0
 800045e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000462:	d005      	beq.n	8000470 <messageHandler+0x118>
	{
		esp_state = ESP_Disconnected;
 8000464:	4b26      	ldr	r3, [pc, #152]	@ (8000500 <messageHandler+0x1a8>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
		ESP_Server_Init();
 800046a:	f7ff feab 	bl	80001c4 <ESP_Server_Init>
 800046e:	e023      	b.n	80004b8 <messageHandler+0x160>
	}else if(string_contains((char*)buffer, "CWJAP", buffer_index) != -1//"AT+CWJAP?\r\n"
 8000470:	4b19      	ldr	r3, [pc, #100]	@ (80004d8 <messageHandler+0x180>)
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	491c      	ldr	r1, [pc, #112]	@ (80004e8 <messageHandler+0x190>)
 8000478:	4819      	ldr	r0, [pc, #100]	@ (80004e0 <messageHandler+0x188>)
 800047a:	f7ff ff40 	bl	80002fe <string_contains>
 800047e:	4603      	mov	r3, r0
 8000480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000484:	d018      	beq.n	80004b8 <messageHandler+0x160>
			&& (string_contains((char*)buffer, "OK", buffer_index) != -1)
 8000486:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <messageHandler+0x180>)
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	461a      	mov	r2, r3
 800048c:	491e      	ldr	r1, [pc, #120]	@ (8000508 <messageHandler+0x1b0>)
 800048e:	4814      	ldr	r0, [pc, #80]	@ (80004e0 <messageHandler+0x188>)
 8000490:	f7ff ff35 	bl	80002fe <string_contains>
 8000494:	4603      	mov	r3, r0
 8000496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800049a:	d00d      	beq.n	80004b8 <messageHandler+0x160>
			&& (string_contains((char*)buffer, "No AP", buffer_index) == -1))// does not contain "No AP"
 800049c:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <messageHandler+0x180>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	461a      	mov	r2, r3
 80004a2:	4913      	ldr	r1, [pc, #76]	@ (80004f0 <messageHandler+0x198>)
 80004a4:	480e      	ldr	r0, [pc, #56]	@ (80004e0 <messageHandler+0x188>)
 80004a6:	f7ff ff2a 	bl	80002fe <string_contains>
 80004aa:	4603      	mov	r3, r0
 80004ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004b0:	d102      	bne.n	80004b8 <messageHandler+0x160>
	{
		esp_state = ESP_Connected;
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <messageHandler+0x1a8>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	701a      	strb	r2, [r3, #0]
	}
	ESP_Clear_Buffer();
 80004b8:	f7ff fee0 	bl	800027c <ESP_Clear_Buffer>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80004bc:	4b05      	ldr	r3, [pc, #20]	@ (80004d4 <messageHandler+0x17c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	4b04      	ldr	r3, [pc, #16]	@ (80004d4 <messageHandler+0x17c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f042 0220 	orr.w	r2, r2, #32
 80004ca:	60da      	str	r2, [r3, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000948 	.word	0x20000948
 80004d8:	2000084c 	.word	0x2000084c
 80004dc:	080041b4 	.word	0x080041b4
 80004e0:	2000007c 	.word	0x2000007c
 80004e4:	080041c0 	.word	0x080041c0
 80004e8:	080041c4 	.word	0x080041c4
 80004ec:	080041cc 	.word	0x080041cc
 80004f0:	080041d4 	.word	0x080041d4
 80004f4:	080041dc 	.word	0x080041dc
 80004f8:	080041ec 	.word	0x080041ec
 80004fc:	0800418c 	.word	0x0800418c
 8000500:	20000854 	.word	0x20000854
 8000504:	080041fc 	.word	0x080041fc
 8000508:	08004208 	.word	0x08004208

0800050c <sendData>:

void sendData()//sends data compatible with a browser
{
 800050c:	b580      	push	{r7, lr}
 800050e:	f5ad 7d70 	sub.w	sp, sp, #960	@ 0x3c0
 8000512:	af00      	add	r7, sp, #0
	char outputString[300], cipsend[50], response[600];
	memset(outputString, 0, 300);
 8000514:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000518:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f003 f970 	bl	8003804 <memset>
	memset(cipsend, 0, 50);
 8000524:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 8000528:	2232      	movs	r2, #50	@ 0x32
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f003 f969 	bl	8003804 <memset>
	memset(response, 0, 600);
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 f962 	bl	8003804 <memset>

	sprintf(outputString, "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><title>IoT Air Sensor</title><meta http-equiv=\"refresh\" content=\"5\"></head><body><h1>This is an IoT Air Sensor</h1><h1>STM32 + ESP8266</h1><h1>It works!!!</h1></body></html>");
 8000540:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000544:	4942      	ldr	r1, [pc, #264]	@ (8000650 <sendData+0x144>)
 8000546:	4618      	mov	r0, r3
 8000548:	f003 f93c 	bl	80037c4 <siprintf>
	sprintf(response, "HTTP/1.1 200 OK\r\nContent-Length: %i\r\nContent-Type: text/html\r\n\r\n%s", strlen(outputString), outputString);
 800054c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff fdfb 	bl	800014c <strlen>
 8000556:	4602      	mov	r2, r0
 8000558:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800055c:	1d38      	adds	r0, r7, #4
 800055e:	493d      	ldr	r1, [pc, #244]	@ (8000654 <sendData+0x148>)
 8000560:	f003 f930 	bl	80037c4 <siprintf>
	sprintf(cipsend, "AT+CIPSEND=0,%i\r\n", strlen(response));
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fdf0 	bl	800014c <strlen>
 800056c:	4602      	mov	r2, r0
 800056e:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 8000572:	4939      	ldr	r1, [pc, #228]	@ (8000658 <sendData+0x14c>)
 8000574:	4618      	mov	r0, r3
 8000576:	f003 f925 	bl	80037c4 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)cipsend, strlen(cipsend), 100);
 800057a:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fde4 	bl	800014c <strlen>
 8000584:	4603      	mov	r3, r0
 8000586:	b29a      	uxth	r2, r3
 8000588:	f507 7117 	add.w	r1, r7, #604	@ 0x25c
 800058c:	2364      	movs	r3, #100	@ 0x64
 800058e:	4833      	ldr	r0, [pc, #204]	@ (800065c <sendData+0x150>)
 8000590:	f002 fabc 	bl	8002b0c <HAL_UART_Transmit>
	HAL_Delay(50);
 8000594:	2032      	movs	r0, #50	@ 0x32
 8000596:	f000 fd57 	bl	8001048 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), 100);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fdd5 	bl	800014c <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	1d39      	adds	r1, r7, #4
 80005a8:	2364      	movs	r3, #100	@ 0x64
 80005aa:	482c      	ldr	r0, [pc, #176]	@ (800065c <sendData+0x150>)
 80005ac:	f002 faae 	bl	8002b0c <HAL_UART_Transmit>
	HAL_Delay(150);
 80005b0:	2096      	movs	r0, #150	@ 0x96
 80005b2:	f000 fd49 	bl	8001048 <HAL_Delay>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80005b6:	4b29      	ldr	r3, [pc, #164]	@ (800065c <sendData+0x150>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68da      	ldr	r2, [r3, #12]
 80005bc:	4b27      	ldr	r3, [pc, #156]	@ (800065c <sendData+0x150>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f042 0220 	orr.w	r2, r2, #32
 80005c4:	60da      	str	r2, [r3, #12]
	uint8_t fail_count = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	f887 33bf 	strb.w	r3, [r7, #959]	@ 0x3bf
	const uint8_t fail_limit = 5;
 80005cc:	2305      	movs	r3, #5
 80005ce:	f887 33be 	strb.w	r3, [r7, #958]	@ 0x3be
	while(1)
	{
		ESP_Close_Connection();
 80005d2:	f000 f84f 	bl	8000674 <ESP_Close_Connection>
		while(messageHandlerFlag == 0);
 80005d6:	bf00      	nop
 80005d8:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <sendData+0x154>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0fb      	beq.n	80005d8 <sendData+0xcc>
		if(!(string_contains((char*)buffer, "CIPCLOSE=0\r\r\n", buffer_index) != -1))
 80005e0:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <sendData+0x158>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4920      	ldr	r1, [pc, #128]	@ (8000668 <sendData+0x15c>)
 80005e8:	4820      	ldr	r0, [pc, #128]	@ (800066c <sendData+0x160>)
 80005ea:	f7ff fe88 	bl	80002fe <string_contains>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f4:	d112      	bne.n	800061c <sendData+0x110>
		{
			fail_count++;
 80005f6:	f897 33bf 	ldrb.w	r3, [r7, #959]	@ 0x3bf
 80005fa:	3301      	adds	r3, #1
 80005fc:	f887 33bf 	strb.w	r3, [r7, #959]	@ 0x3bf
			if(fail_count > fail_limit)
 8000600:	f897 23bf 	ldrb.w	r2, [r7, #959]	@ 0x3bf
 8000604:	f897 33be 	ldrb.w	r3, [r7, #958]	@ 0x3be
 8000608:	429a      	cmp	r2, r3
 800060a:	d901      	bls.n	8000610 <sendData+0x104>
				NVIC_SystemReset();
 800060c:	f7ff fda6 	bl	800015c <__NVIC_SystemReset>

			ESP_Clear_Buffer();
 8000610:	f7ff fe34 	bl	800027c <ESP_Clear_Buffer>
			messageHandlerFlag = 0;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <sendData+0x154>)
 8000616:	2200      	movs	r2, #0
 8000618:	801a      	strh	r2, [r3, #0]
 800061a:	e7da      	b.n	80005d2 <sendData+0xc6>
		}else
		{
			ESP_Clear_Buffer();
 800061c:	f7ff fe2e 	bl	800027c <ESP_Clear_Buffer>
			messageHandlerFlag = 0;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <sendData+0x154>)
 8000622:	2200      	movs	r2, #0
 8000624:	801a      	strh	r2, [r3, #0]
			fail_count = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	f887 33bf 	strb.w	r3, [r7, #959]	@ 0x3bf
			IWDG->KR = 0xAAAA;//Reset WatchDog
 800062c:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <sendData+0x164>)
 800062e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000632:	601a      	str	r2, [r3, #0]
			__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000634:	4b09      	ldr	r3, [pc, #36]	@ (800065c <sendData+0x150>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	68da      	ldr	r2, [r3, #12]
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <sendData+0x150>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f022 0220 	bic.w	r2, r2, #32
 8000642:	60da      	str	r2, [r3, #12]
			break;//next step if succeeded
 8000644:	bf00      	nop
		}
	}
}
 8000646:	bf00      	nop
 8000648:	f507 7770 	add.w	r7, r7, #960	@ 0x3c0
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	0800420c 	.word	0x0800420c
 8000654:	0800430c 	.word	0x0800430c
 8000658:	08004350 	.word	0x08004350
 800065c:	20000948 	.word	0x20000948
 8000660:	20000850 	.word	0x20000850
 8000664:	2000084c 	.word	0x2000084c
 8000668:	08004364 	.word	0x08004364
 800066c:	2000007c 	.word	0x2000007c
 8000670:	40003000 	.word	0x40003000

08000674 <ESP_Close_Connection>:
	HAL_UART_Transmit(&huart2, (uint8_t*)ESP_Post, strlen(ESP_Post), 100);
    HAL_Delay(80);
}

void ESP_Close_Connection()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CIPCLOSE=0\r\n", strlen("AT+CIPCLOSE=0\r\n"), 100);
 8000678:	2364      	movs	r3, #100	@ 0x64
 800067a:	220f      	movs	r2, #15
 800067c:	4902      	ldr	r1, [pc, #8]	@ (8000688 <ESP_Close_Connection+0x14>)
 800067e:	4803      	ldr	r0, [pc, #12]	@ (800068c <ESP_Close_Connection+0x18>)
 8000680:	f002 fa44 	bl	8002b0c <HAL_UART_Transmit>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	080043a0 	.word	0x080043a0
 800068c:	20000948 	.word	0x20000948

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fc76 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f872 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f9c4 	bl	8000a28 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006a0:	f000 f8fe 	bl	80008a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006a4:	f000 f948 	bl	8000938 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80006a8:	f000 f994 	bl	80009d4 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 80006ac:	f000 f8de 	bl	800086c <MX_IWDG_Init>
  MX_I2C1_Init();
 80006b0:	f000 f8ae 	bl	8000810 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);// 20 ms
 80006b4:	4829      	ldr	r0, [pc, #164]	@ (800075c <main+0xcc>)
 80006b6:	f001 fe2f 	bl	8002318 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);// 1 s
 80006ba:	4829      	ldr	r0, [pc, #164]	@ (8000760 <main+0xd0>)
 80006bc:	f001 fe2c 	bl	8002318 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <main+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	68da      	ldr	r2, [r3, #12]
 80006c6:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <main+0xd4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f042 0220 	orr.w	r2, r2, #32
 80006ce:	60da      	str	r2, [r3, #12]
	//WatchDog set to 6.5472 seconds
	IWDG->KR = 0xAAAA;//Reset WatchDog
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <main+0xd8>)
 80006d2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80006d6:	601a      	str	r2, [r3, #0]
	IWDG->KR = 0xCCCC;//Start WatchDog
 80006d8:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <main+0xd8>)
 80006da:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80006de:	601a      	str	r2, [r3, #0]
  ESP_Server_Init();
 80006e0:	f7ff fd70 	bl	80001c4 <ESP_Server_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  IWDG->KR = 0xAAAA;//Reset WatchDog
 80006e4:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <main+0xd8>)
 80006e6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80006ea:	601a      	str	r2, [r3, #0]

	  if(messageHandlerFlag)
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <main+0xdc>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00e      	beq.n	8000712 <main+0x82>
	  {
		  IWDG->KR = 0xAAAA;//Reset WatchDog
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <main+0xd8>)
 80006f6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80006fa:	601a      	str	r2, [r3, #0]
		  messageHandler();
 80006fc:	f7ff fe2c 	bl	8000358 <messageHandler>
		  messageHandlerFlag = 0;
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <main+0xdc>)
 8000702:	2200      	movs	r2, #0
 8000704:	801a      	strh	r2, [r3, #0]
		  timeout = 0;
 8000706:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <main+0xe0>)
 8000708:	2200      	movs	r2, #0
 800070a:	801a      	strh	r2, [r3, #0]
		  no_activity_counter = 0;
 800070c:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <main+0xe4>)
 800070e:	2200      	movs	r2, #0
 8000710:	801a      	strh	r2, [r3, #0]
	  }

	  if(no_activity_counter > 20
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <main+0xe4>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	2b14      	cmp	r3, #20
 8000718:	d915      	bls.n	8000746 <main+0xb6>
		&& esp_state == ESP_Connected)
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <main+0xe8>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d111      	bne.n	8000746 <main+0xb6>
	  {
		  IWDG->KR = 0xAAAA;//Reset WatchDog
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <main+0xd8>)
 8000724:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000728:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CWJAP?\r\n", strlen("AT+CWJAP?\r\n"), 100);
 800072a:	2364      	movs	r3, #100	@ 0x64
 800072c:	220b      	movs	r2, #11
 800072e:	4913      	ldr	r1, [pc, #76]	@ (800077c <main+0xec>)
 8000730:	480c      	ldr	r0, [pc, #48]	@ (8000764 <main+0xd4>)
 8000732:	f002 f9eb 	bl	8002b0c <HAL_UART_Transmit>
		  esp_state = ESP_Disconnected;//until message handler confirms
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <main+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(500);
 800073c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000740:	f000 fc82 	bl	8001048 <HAL_Delay>
 8000744:	e009      	b.n	800075a <main+0xca>
	  }else if(esp_state == ESP_Disconnected
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <main+0xe8>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1ca      	bne.n	80006e4 <main+0x54>
			  && no_activity_counter > 30)
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <main+0xe4>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	2b1e      	cmp	r3, #30
 8000754:	d9c6      	bls.n	80006e4 <main+0x54>
	  {
		  ESP_Server_Init();
 8000756:	f7ff fd35 	bl	80001c4 <ESP_Server_Init>
	  IWDG->KR = 0xAAAA;//Reset WatchDog
 800075a:	e7c3      	b.n	80006e4 <main+0x54>
 800075c:	200008b8 	.word	0x200008b8
 8000760:	20000900 	.word	0x20000900
 8000764:	20000948 	.word	0x20000948
 8000768:	40003000 	.word	0x40003000
 800076c:	20000850 	.word	0x20000850
 8000770:	2000084e 	.word	0x2000084e
 8000774:	20000852 	.word	0x20000852
 8000778:	20000854 	.word	0x20000854
 800077c:	080043b0 	.word	0x080043b0

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b090      	sub	sp, #64	@ 0x40
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0318 	add.w	r3, r7, #24
 800078a:	2228      	movs	r2, #40	@ 0x28
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f003 f838 	bl	8003804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007a2:	2309      	movs	r3, #9
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0318 	add.w	r3, r7, #24
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 f943 	bl	8001a58 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007d8:	f000 f992 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2102      	movs	r1, #2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fbaf 	bl	8001f5c <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000804:	f000 f97c 	bl	8000b00 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3740      	adds	r7, #64	@ 0x40
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <MX_I2C1_Init+0x54>)
 8000816:	4a14      	ldr	r2, [pc, #80]	@ (8000868 <MX_I2C1_Init+0x58>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 800081a:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_I2C1_Init+0x54>)
 800081c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000820:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_I2C1_Init+0x54>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_I2C1_Init+0x54>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <MX_I2C1_Init+0x54>)
 8000830:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000834:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_I2C1_Init+0x54>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_I2C1_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_I2C1_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_I2C1_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_I2C1_Init+0x54>)
 8000850:	f000 ff7a 	bl	8001748 <HAL_I2C_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800085a:	f000 f951 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000858 	.word	0x20000858
 8000868:	40005400 	.word	0x40005400

0800086c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_IWDG_Init+0x2c>)
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <MX_IWDG_Init+0x30>)
 8000874:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_IWDG_Init+0x2c>)
 8000878:	2206      	movs	r2, #6
 800087a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1023;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_IWDG_Init+0x2c>)
 800087e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000882:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_IWDG_Init+0x2c>)
 8000886:	f001 f8a3 	bl	80019d0 <HAL_IWDG_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000890:	f000 f936 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200008ac 	.word	0x200008ac
 800089c:	40003000 	.word	0x40003000

080008a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <MX_TIM2_Init+0x94>)
 80008be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <MX_TIM2_Init+0x94>)
 80008c6:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 80008ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <MX_TIM2_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <MX_TIM2_Init+0x94>)
 80008d4:	22c7      	movs	r2, #199	@ 0xc7
 80008d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <MX_TIM2_Init+0x94>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <MX_TIM2_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e4:	4813      	ldr	r0, [pc, #76]	@ (8000934 <MX_TIM2_Init+0x94>)
 80008e6:	f001 fcc7 	bl	8002278 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008f0:	f000 f906 	bl	8000b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <MX_TIM2_Init+0x94>)
 8000902:	f001 fe4b 	bl	800259c <HAL_TIM_ConfigClockSource>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800090c:	f000 f8f8 	bl	8000b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_TIM2_Init+0x94>)
 800091e:	f002 f835 	bl	800298c <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000928:	f000 f8ea 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200008b8 	.word	0x200008b8

08000938 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000954:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <MX_TIM3_Init+0x94>)
 8000956:	4a1e      	ldr	r2, [pc, #120]	@ (80009d0 <MX_TIM3_Init+0x98>)
 8000958:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_TIM3_Init+0x94>)
 800095c:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8000960:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MX_TIM3_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000968:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <MX_TIM3_Init+0x94>)
 800096a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800096e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <MX_TIM3_Init+0x94>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_TIM3_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800097c:	4813      	ldr	r0, [pc, #76]	@ (80009cc <MX_TIM3_Init+0x94>)
 800097e:	f001 fc7b 	bl	8002278 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000988:	f000 f8ba 	bl	8000b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000990:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <MX_TIM3_Init+0x94>)
 800099a:	f001 fdff 	bl	800259c <HAL_TIM_ConfigClockSource>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009a4:	f000 f8ac 	bl	8000b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_TIM3_Init+0x94>)
 80009b6:	f001 ffe9 	bl	800298c <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80009c0:	f000 f89e 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000900 	.word	0x20000900
 80009d0:	40000400 	.word	0x40000400

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <MX_USART2_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	f002 f82e 	bl	8002a6c <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 f873 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000948 	.word	0x20000948
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a2c      	ldr	r2, [pc, #176]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b2a      	ldr	r3, [pc, #168]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0310 	and.w	r3, r3, #16
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a54:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a26      	ldr	r2, [pc, #152]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a5a:	f043 0320 	orr.w	r3, r3, #32
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b24      	ldr	r3, [pc, #144]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0320 	and.w	r3, r3, #32
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a20      	ldr	r2, [pc, #128]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b1e      	ldr	r3, [pc, #120]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a1a      	ldr	r2, [pc, #104]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <MX_GPIO_Init+0xcc>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0308 	and.w	r3, r3, #8
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa2:	4815      	ldr	r0, [pc, #84]	@ (8000af8 <MX_GPIO_Init+0xd0>)
 8000aa4:	f000 fe38 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP_RESET_Pin|ESP_ENABLE_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2118      	movs	r1, #24
 8000aac:	4813      	ldr	r0, [pc, #76]	@ (8000afc <MX_GPIO_Init+0xd4>)
 8000aae:	f000 fe33 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ab2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <MX_GPIO_Init+0xd0>)
 8000acc:	f000 fca0 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_RESET_Pin ESP_ENABLE_Pin */
  GPIO_InitStruct.Pin = ESP_RESET_Pin|ESP_ENABLE_Pin;
 8000ad0:	2318      	movs	r3, #24
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_GPIO_Init+0xd4>)
 8000ae8:	f000 fc92 	bl	8001410 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40011000 	.word	0x40011000
 8000afc:	40010c00 	.word	0x40010c00

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_MspInit+0x60>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <HAL_MspInit+0x60>)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000

08000b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <HAL_I2C_MspInit+0x70>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d123      	bne.n	8000bd8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ba8:	23c0      	movs	r3, #192	@ 0xc0
 8000baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bac:	2312      	movs	r3, #18
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480b      	ldr	r0, [pc, #44]	@ (8000be8 <HAL_I2C_MspInit+0x78>)
 8000bbc:	f000 fc28 	bl	8001410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000bc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bca:	61d3      	str	r3, [r2, #28]
 8000bcc:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000bce:	69db      	ldr	r3, [r3, #28]
 8000bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40005400 	.word	0x40005400
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010c00 	.word	0x40010c00

08000bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bfc:	d114      	bne.n	8000c28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <HAL_TIM_Base_MspInit+0x78>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a18      	ldr	r2, [pc, #96]	@ (8000c64 <HAL_TIM_Base_MspInit+0x78>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	61d3      	str	r3, [r2, #28]
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <HAL_TIM_Base_MspInit+0x78>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	201c      	movs	r0, #28
 8000c1c:	f000 fb0f 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c20:	201c      	movs	r0, #28
 8000c22:	f000 fb28 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c26:	e018      	b.n	8000c5a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c68 <HAL_TIM_Base_MspInit+0x7c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d113      	bne.n	8000c5a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <HAL_TIM_Base_MspInit+0x78>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4a0b      	ldr	r2, [pc, #44]	@ (8000c64 <HAL_TIM_Base_MspInit+0x78>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	61d3      	str	r3, [r2, #28]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_TIM_Base_MspInit+0x78>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	201d      	movs	r0, #29
 8000c50:	f000 faf5 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c54:	201d      	movs	r0, #29
 8000c56:	f000 fb0e 	bl	8001276 <HAL_NVIC_EnableIRQ>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40000400 	.word	0x40000400

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a1f      	ldr	r2, [pc, #124]	@ (8000d04 <HAL_UART_MspInit+0x98>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d137      	bne.n	8000cfc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <HAL_UART_MspInit+0x9c>)
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	4a1d      	ldr	r2, [pc, #116]	@ (8000d08 <HAL_UART_MspInit+0x9c>)
 8000c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c96:	61d3      	str	r3, [r2, #28]
 8000c98:	4b1b      	ldr	r3, [pc, #108]	@ (8000d08 <HAL_UART_MspInit+0x9c>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <HAL_UART_MspInit+0x9c>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a17      	ldr	r2, [pc, #92]	@ (8000d08 <HAL_UART_MspInit+0x9c>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <HAL_UART_MspInit+0x9c>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480f      	ldr	r0, [pc, #60]	@ (8000d0c <HAL_UART_MspInit+0xa0>)
 8000cd0:	f000 fb9e 	bl	8001410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <HAL_UART_MspInit+0xa0>)
 8000ce8:	f000 fb92 	bl	8001410 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2026      	movs	r0, #38	@ 0x26
 8000cf2:	f000 faa4 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cf6:	2026      	movs	r0, #38	@ 0x26
 8000cf8:	f000 fabd 	bl	8001276 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40004400 	.word	0x40004400
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <MemManage_Handler+0x4>

08000d28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 f956 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// 20 milliseconds
	if(timeout != 0 && timeout < 10)
 8000d6c:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <TIM2_IRQHandler+0x68>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d009      	beq.n	8000d88 <TIM2_IRQHandler+0x20>
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <TIM2_IRQHandler+0x68>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	2b09      	cmp	r3, #9
 8000d7a:	d805      	bhi.n	8000d88 <TIM2_IRQHandler+0x20>
		timeout++;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <TIM2_IRQHandler+0x68>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <TIM2_IRQHandler+0x68>)
 8000d86:	801a      	strh	r2, [r3, #0]

	if(timeout > 2)
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <TIM2_IRQHandler+0x68>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d905      	bls.n	8000d9c <TIM2_IRQHandler+0x34>
	{
		timeout = 0;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <TIM2_IRQHandler+0x68>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	801a      	strh	r2, [r3, #0]
		messageHandlerFlag = 1;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <TIM2_IRQHandler+0x6c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	801a      	strh	r2, [r3, #0]
	}

	if(esp_state == ESP_Connected)
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <TIM2_IRQHandler+0x70>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d106      	bne.n	8000db2 <TIM2_IRQHandler+0x4a>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000daa:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <TIM2_IRQHandler+0x74>)
 8000dac:	f000 fcb4 	bl	8001718 <HAL_GPIO_WritePin>
 8000db0:	e009      	b.n	8000dc6 <TIM2_IRQHandler+0x5e>
	else if(esp_state == ESP_Disconnected)
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <TIM2_IRQHandler+0x70>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d105      	bne.n	8000dc6 <TIM2_IRQHandler+0x5e>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dc0:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <TIM2_IRQHandler+0x74>)
 8000dc2:	f000 fca9 	bl	8001718 <HAL_GPIO_WritePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dc6:	4806      	ldr	r0, [pc, #24]	@ (8000de0 <TIM2_IRQHandler+0x78>)
 8000dc8:	f001 faf8 	bl	80023bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000084e 	.word	0x2000084e
 8000dd4:	20000850 	.word	0x20000850
 8000dd8:	20000854 	.word	0x20000854
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	200008b8 	.word	0x200008b8

08000de4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	// 1 second
	seconds++;
 8000de8:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <TIM3_IRQHandler+0x24>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <TIM3_IRQHandler+0x24>)
 8000df0:	6013      	str	r3, [r2, #0]
	no_activity_counter++;
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <TIM3_IRQHandler+0x28>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <TIM3_IRQHandler+0x28>)
 8000dfc:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dfe:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <TIM3_IRQHandler+0x2c>)
 8000e00:	f001 fadc 	bl	80023bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000078 	.word	0x20000078
 8000e0c:	20000852 	.word	0x20000852
 8000e10:	20000900 	.word	0x20000900

08000e14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	timeout = 1;
 8000e18:	4b23      	ldr	r3, [pc, #140]	@ (8000ea8 <USART2_IRQHandler+0x94>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	801a      	strh	r2, [r3, #0]

	if(buffer_index < 2000)
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <USART2_IRQHandler+0x98>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e26:	d20e      	bcs.n	8000e46 <USART2_IRQHandler+0x32>
	{
		HAL_UART_Receive(&huart2, &buffer[buffer_index++], 1, 10);
 8000e28:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <USART2_IRQHandler+0x98>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	b291      	uxth	r1, r2
 8000e30:	4a1e      	ldr	r2, [pc, #120]	@ (8000eac <USART2_IRQHandler+0x98>)
 8000e32:	8011      	strh	r1, [r2, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <USART2_IRQHandler+0x9c>)
 8000e38:	18d1      	adds	r1, r2, r3
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	481d      	ldr	r0, [pc, #116]	@ (8000eb4 <USART2_IRQHandler+0xa0>)
 8000e40:	f001 feef 	bl	8002c22 <HAL_UART_Receive>
 8000e44:	e005      	b.n	8000e52 <USART2_IRQHandler+0x3e>
	}
	else
	{
		HAL_UART_Receive(&huart2, &buffer[1999], 1, 10);
 8000e46:	230a      	movs	r3, #10
 8000e48:	2201      	movs	r2, #1
 8000e4a:	491b      	ldr	r1, [pc, #108]	@ (8000eb8 <USART2_IRQHandler+0xa4>)
 8000e4c:	4819      	ldr	r0, [pc, #100]	@ (8000eb4 <USART2_IRQHandler+0xa0>)
 8000e4e:	f001 fee8 	bl	8002c22 <HAL_UART_Receive>
	}

	if(buffer_index > 5)
 8000e52:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <USART2_IRQHandler+0x98>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	2b05      	cmp	r3, #5
 8000e58:	d921      	bls.n	8000e9e <USART2_IRQHandler+0x8a>
	{
		if(buffer[buffer_index-4] == '\r' && buffer[buffer_index-3] == '\n' && buffer[buffer_index-2] == '\r' && buffer[buffer_index-1] == '\n')
 8000e5a:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <USART2_IRQHandler+0x98>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	4a13      	ldr	r2, [pc, #76]	@ (8000eb0 <USART2_IRQHandler+0x9c>)
 8000e62:	5cd3      	ldrb	r3, [r2, r3]
 8000e64:	2b0d      	cmp	r3, #13
 8000e66:	d11a      	bne.n	8000e9e <USART2_IRQHandler+0x8a>
 8000e68:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <USART2_IRQHandler+0x98>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	4a10      	ldr	r2, [pc, #64]	@ (8000eb0 <USART2_IRQHandler+0x9c>)
 8000e70:	5cd3      	ldrb	r3, [r2, r3]
 8000e72:	2b0a      	cmp	r3, #10
 8000e74:	d113      	bne.n	8000e9e <USART2_IRQHandler+0x8a>
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <USART2_IRQHandler+0x98>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	3b02      	subs	r3, #2
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <USART2_IRQHandler+0x9c>)
 8000e7e:	5cd3      	ldrb	r3, [r2, r3]
 8000e80:	2b0d      	cmp	r3, #13
 8000e82:	d10c      	bne.n	8000e9e <USART2_IRQHandler+0x8a>
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <USART2_IRQHandler+0x98>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	4a09      	ldr	r2, [pc, #36]	@ (8000eb0 <USART2_IRQHandler+0x9c>)
 8000e8c:	5cd3      	ldrb	r3, [r2, r3]
 8000e8e:	2b0a      	cmp	r3, #10
 8000e90:	d105      	bne.n	8000e9e <USART2_IRQHandler+0x8a>
		{
			messageHandlerFlag = 1;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <USART2_IRQHandler+0xa8>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	801a      	strh	r2, [r3, #0]
			timeout = 0;
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <USART2_IRQHandler+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	801a      	strh	r2, [r3, #0]
		}
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <USART2_IRQHandler+0xa0>)
 8000ea0:	f001 ff56 	bl	8002d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000084e 	.word	0x2000084e
 8000eac:	2000084c 	.word	0x2000084c
 8000eb0:	2000007c 	.word	0x2000007c
 8000eb4:	20000948 	.word	0x20000948
 8000eb8:	2000084b 	.word	0x2000084b
 8000ebc:	20000850 	.word	0x20000850

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f002 fc90 	bl	8003814 <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20005000 	.word	0x20005000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000990 	.word	0x20000990
 8000f28:	20000ae0 	.word	0x20000ae0

08000f2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f38:	f7ff fff8 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480b      	ldr	r0, [pc, #44]	@ (8000f6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f3e:	490c      	ldr	r1, [pc, #48]	@ (8000f70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f40:	4a0c      	ldr	r2, [pc, #48]	@ (8000f74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a09      	ldr	r2, [pc, #36]	@ (8000f78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f54:	4c09      	ldr	r4, [pc, #36]	@ (8000f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f002 fc5d 	bl	8003820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f66:	f7ff fb93 	bl	8000690 <main>
  bx lr
 8000f6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f74:	0800442c 	.word	0x0800442c
  ldr r2, =_sbss
 8000f78:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f7c:	20000ae0 	.word	0x20000ae0

08000f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC1_2_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_Init+0x28>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <HAL_Init+0x28>)
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f947 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f000 f808 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fdb4 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40022000 	.word	0x40022000

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f95f 	bl	8001292 <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 f927 	bl	800123e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	@ (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	20000008 	.word	0x20000008
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <HAL_IncTick+0x1c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <HAL_IncTick+0x20>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a03      	ldr	r2, [pc, #12]	@ (8001030 <HAL_IncTick+0x20>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	20000008 	.word	0x20000008
 8001030:	20000994 	.word	0x20000994

08001034 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b02      	ldr	r3, [pc, #8]	@ (8001044 <HAL_GetTick+0x10>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	20000994 	.word	0x20000994

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff fff0 	bl	8001034 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffe0 	bl	8001034 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008

08001090 <__NVIC_SetPriorityGrouping>:
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4906      	ldr	r1, [pc, #24]	@ (8001128 <__NVIC_EnableIRQ+0x34>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	@ (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	@ (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	@ 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f7ff ff90 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	@ (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff2d 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff42 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff90 	bl	8001180 <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5f 	bl	800112c <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff35 	bl	80010f4 <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa2 	bl	80011e4 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d008      	beq.n	80012d4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2204      	movs	r2, #4
 80012c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e020      	b.n	8001316 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 020e 	bic.w	r2, r2, #14
 80012e2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001302:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001314:	7bfb      	ldrb	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d005      	beq.n	8001344 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2204      	movs	r2, #4
 800133c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	73fb      	strb	r3, [r7, #15]
 8001342:	e051      	b.n	80013e8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 020e 	bic.w	r2, r2, #14
 8001352:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a22      	ldr	r2, [pc, #136]	@ (80013f4 <HAL_DMA_Abort_IT+0xd4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d029      	beq.n	80013c2 <HAL_DMA_Abort_IT+0xa2>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a21      	ldr	r2, [pc, #132]	@ (80013f8 <HAL_DMA_Abort_IT+0xd8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d022      	beq.n	80013be <HAL_DMA_Abort_IT+0x9e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1f      	ldr	r2, [pc, #124]	@ (80013fc <HAL_DMA_Abort_IT+0xdc>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01a      	beq.n	80013b8 <HAL_DMA_Abort_IT+0x98>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1e      	ldr	r2, [pc, #120]	@ (8001400 <HAL_DMA_Abort_IT+0xe0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d012      	beq.n	80013b2 <HAL_DMA_Abort_IT+0x92>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a1c      	ldr	r2, [pc, #112]	@ (8001404 <HAL_DMA_Abort_IT+0xe4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00a      	beq.n	80013ac <HAL_DMA_Abort_IT+0x8c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a1b      	ldr	r2, [pc, #108]	@ (8001408 <HAL_DMA_Abort_IT+0xe8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d102      	bne.n	80013a6 <HAL_DMA_Abort_IT+0x86>
 80013a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013a4:	e00e      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013aa:	e00b      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b0:	e008      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b6:	e005      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013bc:	e002      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013be:	2310      	movs	r3, #16
 80013c0:	e000      	b.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
 80013c2:	2301      	movs	r3, #1
 80013c4:	4a11      	ldr	r2, [pc, #68]	@ (800140c <HAL_DMA_Abort_IT+0xec>)
 80013c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	4798      	blx	r3
    } 
  }
  return status;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40020008 	.word	0x40020008
 80013f8:	4002001c 	.word	0x4002001c
 80013fc:	40020030 	.word	0x40020030
 8001400:	40020044 	.word	0x40020044
 8001404:	40020058 	.word	0x40020058
 8001408:	4002006c 	.word	0x4002006c
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b08b      	sub	sp, #44	@ 0x2c
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e169      	b.n	80016f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001424:	2201      	movs	r2, #1
 8001426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 8158 	bne.w	80016f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a9a      	ldr	r2, [pc, #616]	@ (80016b0 <HAL_GPIO_Init+0x2a0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d05e      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 800144c:	4a98      	ldr	r2, [pc, #608]	@ (80016b0 <HAL_GPIO_Init+0x2a0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d875      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001452:	4a98      	ldr	r2, [pc, #608]	@ (80016b4 <HAL_GPIO_Init+0x2a4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d058      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001458:	4a96      	ldr	r2, [pc, #600]	@ (80016b4 <HAL_GPIO_Init+0x2a4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d86f      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800145e:	4a96      	ldr	r2, [pc, #600]	@ (80016b8 <HAL_GPIO_Init+0x2a8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d052      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001464:	4a94      	ldr	r2, [pc, #592]	@ (80016b8 <HAL_GPIO_Init+0x2a8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d869      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800146a:	4a94      	ldr	r2, [pc, #592]	@ (80016bc <HAL_GPIO_Init+0x2ac>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d04c      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 8001470:	4a92      	ldr	r2, [pc, #584]	@ (80016bc <HAL_GPIO_Init+0x2ac>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d863      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001476:	4a92      	ldr	r2, [pc, #584]	@ (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d046      	beq.n	800150a <HAL_GPIO_Init+0xfa>
 800147c:	4a90      	ldr	r2, [pc, #576]	@ (80016c0 <HAL_GPIO_Init+0x2b0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d85d      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 8001482:	2b12      	cmp	r3, #18
 8001484:	d82a      	bhi.n	80014dc <HAL_GPIO_Init+0xcc>
 8001486:	2b12      	cmp	r3, #18
 8001488:	d859      	bhi.n	800153e <HAL_GPIO_Init+0x12e>
 800148a:	a201      	add	r2, pc, #4	@ (adr r2, 8001490 <HAL_GPIO_Init+0x80>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	0800150b 	.word	0x0800150b
 8001494:	080014e5 	.word	0x080014e5
 8001498:	080014f7 	.word	0x080014f7
 800149c:	08001539 	.word	0x08001539
 80014a0:	0800153f 	.word	0x0800153f
 80014a4:	0800153f 	.word	0x0800153f
 80014a8:	0800153f 	.word	0x0800153f
 80014ac:	0800153f 	.word	0x0800153f
 80014b0:	0800153f 	.word	0x0800153f
 80014b4:	0800153f 	.word	0x0800153f
 80014b8:	0800153f 	.word	0x0800153f
 80014bc:	0800153f 	.word	0x0800153f
 80014c0:	0800153f 	.word	0x0800153f
 80014c4:	0800153f 	.word	0x0800153f
 80014c8:	0800153f 	.word	0x0800153f
 80014cc:	0800153f 	.word	0x0800153f
 80014d0:	0800153f 	.word	0x0800153f
 80014d4:	080014ed 	.word	0x080014ed
 80014d8:	08001501 	.word	0x08001501
 80014dc:	4a79      	ldr	r2, [pc, #484]	@ (80016c4 <HAL_GPIO_Init+0x2b4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014e2:	e02c      	b.n	800153e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e029      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	3304      	adds	r3, #4
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	e024      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	3308      	adds	r3, #8
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e01f      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	330c      	adds	r3, #12
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	e01a      	b.n	8001540 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001512:	2304      	movs	r3, #4
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e013      	b.n	8001540 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001520:	2308      	movs	r3, #8
 8001522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	611a      	str	r2, [r3, #16]
          break;
 800152a:	e009      	b.n	8001540 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800152c:	2308      	movs	r3, #8
 800152e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	615a      	str	r2, [r3, #20]
          break;
 8001536:	e003      	b.n	8001540 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x130>
          break;
 800153e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2bff      	cmp	r3, #255	@ 0xff
 8001544:	d801      	bhi.n	800154a <HAL_GPIO_Init+0x13a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	e001      	b.n	800154e <HAL_GPIO_Init+0x13e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3304      	adds	r3, #4
 800154e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2bff      	cmp	r3, #255	@ 0xff
 8001554:	d802      	bhi.n	800155c <HAL_GPIO_Init+0x14c>
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	e002      	b.n	8001562 <HAL_GPIO_Init+0x152>
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	3b08      	subs	r3, #8
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	210f      	movs	r1, #15
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	401a      	ands	r2, r3
 8001574:	6a39      	ldr	r1, [r7, #32]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	431a      	orrs	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80b1 	beq.w	80016f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001590:	4b4d      	ldr	r3, [pc, #308]	@ (80016c8 <HAL_GPIO_Init+0x2b8>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a4c      	ldr	r2, [pc, #304]	@ (80016c8 <HAL_GPIO_Init+0x2b8>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b4a      	ldr	r3, [pc, #296]	@ (80016c8 <HAL_GPIO_Init+0x2b8>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a8:	4a48      	ldr	r2, [pc, #288]	@ (80016cc <HAL_GPIO_Init+0x2bc>)
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a40      	ldr	r2, [pc, #256]	@ (80016d0 <HAL_GPIO_Init+0x2c0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d013      	beq.n	80015fc <HAL_GPIO_Init+0x1ec>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a3f      	ldr	r2, [pc, #252]	@ (80016d4 <HAL_GPIO_Init+0x2c4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00d      	beq.n	80015f8 <HAL_GPIO_Init+0x1e8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a3e      	ldr	r2, [pc, #248]	@ (80016d8 <HAL_GPIO_Init+0x2c8>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d007      	beq.n	80015f4 <HAL_GPIO_Init+0x1e4>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a3d      	ldr	r2, [pc, #244]	@ (80016dc <HAL_GPIO_Init+0x2cc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d101      	bne.n	80015f0 <HAL_GPIO_Init+0x1e0>
 80015ec:	2303      	movs	r3, #3
 80015ee:	e006      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f0:	2304      	movs	r3, #4
 80015f2:	e004      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e002      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015fc:	2300      	movs	r3, #0
 80015fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001600:	f002 0203 	and.w	r2, r2, #3
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	4093      	lsls	r3, r2
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800160e:	492f      	ldr	r1, [pc, #188]	@ (80016cc <HAL_GPIO_Init+0x2bc>)
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001628:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	492c      	ldr	r1, [pc, #176]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001636:	4b2a      	ldr	r3, [pc, #168]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	4928      	ldr	r1, [pc, #160]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001640:	4013      	ands	r3, r2
 8001642:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001650:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	4922      	ldr	r1, [pc, #136]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	60cb      	str	r3, [r1, #12]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800165e:	4b20      	ldr	r3, [pc, #128]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	491e      	ldr	r1, [pc, #120]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001668:	4013      	ands	r3, r2
 800166a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001678:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4918      	ldr	r1, [pc, #96]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	43db      	mvns	r3, r3
 800168e:	4914      	ldr	r1, [pc, #80]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 8001690:	4013      	ands	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d021      	beq.n	80016e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	490e      	ldr	r1, [pc, #56]	@ (80016e0 <HAL_GPIO_Init+0x2d0>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
 80016ac:	e021      	b.n	80016f2 <HAL_GPIO_Init+0x2e2>
 80016ae:	bf00      	nop
 80016b0:	10320000 	.word	0x10320000
 80016b4:	10310000 	.word	0x10310000
 80016b8:	10220000 	.word	0x10220000
 80016bc:	10210000 	.word	0x10210000
 80016c0:	10120000 	.word	0x10120000
 80016c4:	10110000 	.word	0x10110000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	40010800 	.word	0x40010800
 80016d4:	40010c00 	.word	0x40010c00
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40011400 	.word	0x40011400
 80016e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_GPIO_Init+0x304>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4909      	ldr	r1, [pc, #36]	@ (8001714 <HAL_GPIO_Init+0x304>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	3301      	adds	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	f47f ae8e 	bne.w	8001424 <HAL_GPIO_Init+0x14>
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	372c      	adds	r7, #44	@ 0x2c
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001734:	e003      	b.n	800173e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	041a      	lsls	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	611a      	str	r2, [r3, #16]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e12b      	b.n	80019b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff f9fe 	bl	8000b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2224      	movs	r2, #36	@ 0x24
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0201 	bic.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800179a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017ac:	f000 fd1e 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 80017b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a81      	ldr	r2, [pc, #516]	@ (80019bc <HAL_I2C_Init+0x274>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d807      	bhi.n	80017cc <HAL_I2C_Init+0x84>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4a80      	ldr	r2, [pc, #512]	@ (80019c0 <HAL_I2C_Init+0x278>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	bf94      	ite	ls
 80017c4:	2301      	movls	r3, #1
 80017c6:	2300      	movhi	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	e006      	b.n	80017da <HAL_I2C_Init+0x92>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4a7d      	ldr	r2, [pc, #500]	@ (80019c4 <HAL_I2C_Init+0x27c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	bf94      	ite	ls
 80017d4:	2301      	movls	r3, #1
 80017d6:	2300      	movhi	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0e7      	b.n	80019b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4a78      	ldr	r2, [pc, #480]	@ (80019c8 <HAL_I2C_Init+0x280>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0c9b      	lsrs	r3, r3, #18
 80017ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	430a      	orrs	r2, r1
 8001800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4a6a      	ldr	r2, [pc, #424]	@ (80019bc <HAL_I2C_Init+0x274>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d802      	bhi.n	800181c <HAL_I2C_Init+0xd4>
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	3301      	adds	r3, #1
 800181a:	e009      	b.n	8001830 <HAL_I2C_Init+0xe8>
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	4a69      	ldr	r2, [pc, #420]	@ (80019cc <HAL_I2C_Init+0x284>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	3301      	adds	r3, #1
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	430b      	orrs	r3, r1
 8001836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001842:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	495c      	ldr	r1, [pc, #368]	@ (80019bc <HAL_I2C_Init+0x274>)
 800184c:	428b      	cmp	r3, r1
 800184e:	d819      	bhi.n	8001884 <HAL_I2C_Init+0x13c>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1e59      	subs	r1, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fbb1 f3f3 	udiv	r3, r1, r3
 800185e:	1c59      	adds	r1, r3, #1
 8001860:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001864:	400b      	ands	r3, r1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00a      	beq.n	8001880 <HAL_I2C_Init+0x138>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1e59      	subs	r1, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fbb1 f3f3 	udiv	r3, r1, r3
 8001878:	3301      	adds	r3, #1
 800187a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187e:	e051      	b.n	8001924 <HAL_I2C_Init+0x1dc>
 8001880:	2304      	movs	r3, #4
 8001882:	e04f      	b.n	8001924 <HAL_I2C_Init+0x1dc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d111      	bne.n	80018b0 <HAL_I2C_Init+0x168>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1e58      	subs	r0, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	440b      	add	r3, r1
 800189a:	fbb0 f3f3 	udiv	r3, r0, r3
 800189e:	3301      	adds	r3, #1
 80018a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf0c      	ite	eq
 80018a8:	2301      	moveq	r3, #1
 80018aa:	2300      	movne	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	e012      	b.n	80018d6 <HAL_I2C_Init+0x18e>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	0099      	lsls	r1, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Init+0x196>
 80018da:	2301      	movs	r3, #1
 80018dc:	e022      	b.n	8001924 <HAL_I2C_Init+0x1dc>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10e      	bne.n	8001904 <HAL_I2C_Init+0x1bc>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1e58      	subs	r0, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6859      	ldr	r1, [r3, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	440b      	add	r3, r1
 80018f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001902:	e00f      	b.n	8001924 <HAL_I2C_Init+0x1dc>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1e58      	subs	r0, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	0099      	lsls	r1, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	fbb0 f3f3 	udiv	r3, r0, r3
 800191a:	3301      	adds	r3, #1
 800191c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001920:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	6809      	ldr	r1, [r1, #0]
 8001928:	4313      	orrs	r3, r2
 800192a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69da      	ldr	r2, [r3, #28]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001952:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6911      	ldr	r1, [r2, #16]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68d2      	ldr	r2, [r2, #12]
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	430b      	orrs	r3, r1
 8001966:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2220      	movs	r2, #32
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	000186a0 	.word	0x000186a0
 80019c0:	001e847f 	.word	0x001e847f
 80019c4:	003d08ff 	.word	0x003d08ff
 80019c8:	431bde83 	.word	0x431bde83
 80019cc:	10624dd3 	.word	0x10624dd3

080019d0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e036      	b.n	8001a50 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80019ea:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f245 5255 	movw	r2, #21845	@ 0x5555
 80019f4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6852      	ldr	r2, [r2, #4]
 80019fe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6892      	ldr	r2, [r2, #8]
 8001a08:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001a0a:	f7ff fb13 	bl	8001034 <HAL_GetTick>
 8001a0e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001a10:	e011      	b.n	8001a36 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001a12:	f7ff fb0f 	bl	8001034 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 323c 	movw	r2, #4924	@ 0x133c
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d908      	bls.n	8001a36 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e00c      	b.n	8001a50 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e6      	bne.n	8001a12 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001a4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e272      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8087 	beq.w	8001b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a78:	4b92      	ldr	r3, [pc, #584]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d00c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a84:	4b8f      	ldr	r3, [pc, #572]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d112      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5e>
 8001a90:	4b8c      	ldr	r3, [pc, #560]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9e:	4b89      	ldr	r3, [pc, #548]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d06c      	beq.n	8001b84 <HAL_RCC_OscConfig+0x12c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d168      	bne.n	8001b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e24c      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x76>
 8001ac0:	4b80      	ldr	r3, [pc, #512]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a7f      	ldr	r2, [pc, #508]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e02e      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x98>
 8001ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a7a      	ldr	r2, [pc, #488]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b78      	ldr	r3, [pc, #480]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a77      	ldr	r2, [pc, #476]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e01d      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0xbc>
 8001afa:	4b72      	ldr	r3, [pc, #456]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a71      	ldr	r2, [pc, #452]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6e      	ldr	r2, [pc, #440]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001b14:	4b6b      	ldr	r3, [pc, #428]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a6a      	ldr	r2, [pc, #424]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b68      	ldr	r3, [pc, #416]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a67      	ldr	r2, [pc, #412]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fa7e 	bl	8001034 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fa7a 	bl	8001034 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	@ 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e200      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0xe4>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fa6a 	bl	8001034 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fa66 	bl	8001034 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	@ 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1ec      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	4b53      	ldr	r3, [pc, #332]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x10c>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d063      	beq.n	8001c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b92:	4b4c      	ldr	r3, [pc, #304]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b9e:	4b49      	ldr	r3, [pc, #292]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d11c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x18c>
 8001baa:	4b46      	ldr	r3, [pc, #280]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d116      	bne.n	8001be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	4b43      	ldr	r3, [pc, #268]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x176>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e1c0      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4939      	ldr	r1, [pc, #228]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	e03a      	b.n	8001c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bec:	4b36      	ldr	r3, [pc, #216]	@ (8001cc8 <HAL_RCC_OscConfig+0x270>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fa1f 	bl	8001034 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fa1b 	bl	8001034 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1a1      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4927      	ldr	r1, [pc, #156]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2e:	4b26      	ldr	r3, [pc, #152]	@ (8001cc8 <HAL_RCC_OscConfig+0x270>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff f9fe 	bl	8001034 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3c:	f7ff f9fa 	bl	8001034 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e180      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d03a      	beq.n	8001cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d019      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7ff f9de 	bl	8001034 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff f9da 	bl	8001034 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e160      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f000 face 	bl	800223c <RCC_Delay>
 8001ca0:	e01c      	b.n	8001cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff f9c4 	bl	8001034 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cae:	e00f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f9c0 	bl	8001034 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d908      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e146      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	42420000 	.word	0x42420000
 8001ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	4b92      	ldr	r3, [pc, #584]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e9      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80a6 	beq.w	8001e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cee:	4b8b      	ldr	r3, [pc, #556]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10d      	bne.n	8001d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b88      	ldr	r3, [pc, #544]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a87      	ldr	r2, [pc, #540]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d04:	61d3      	str	r3, [r2, #28]
 8001d06:	4b85      	ldr	r3, [pc, #532]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d12:	2301      	movs	r3, #1
 8001d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b82      	ldr	r3, [pc, #520]	@ (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d118      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d22:	4b7f      	ldr	r3, [pc, #508]	@ (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7e      	ldr	r2, [pc, #504]	@ (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2e:	f7ff f981 	bl	8001034 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d36:	f7ff f97d 	bl	8001034 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b64      	cmp	r3, #100	@ 0x64
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e103      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	4b75      	ldr	r3, [pc, #468]	@ (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x312>
 8001d5c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a6e      	ldr	r2, [pc, #440]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	e02d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x334>
 8001d72:	4b6a      	ldr	r3, [pc, #424]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4a69      	ldr	r2, [pc, #420]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	6213      	str	r3, [r2, #32]
 8001d7e:	4b67      	ldr	r3, [pc, #412]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a66      	ldr	r2, [pc, #408]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	e01c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d10c      	bne.n	8001dae <HAL_RCC_OscConfig+0x356>
 8001d94:	4b61      	ldr	r3, [pc, #388]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a60      	ldr	r2, [pc, #384]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a5d      	ldr	r2, [pc, #372]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	e00b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001dae:	4b5b      	ldr	r3, [pc, #364]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a5a      	ldr	r2, [pc, #360]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	4b58      	ldr	r3, [pc, #352]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a57      	ldr	r2, [pc, #348]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d015      	beq.n	8001dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7ff f931 	bl	8001034 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7ff f92d 	bl	8001034 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0b1      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	4b4b      	ldr	r3, [pc, #300]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0ee      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x37e>
 8001df8:	e014      	b.n	8001e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff f91b 	bl	8001034 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7ff f917 	bl	8001034 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e09b      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e18:	4b40      	ldr	r3, [pc, #256]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ee      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d105      	bne.n	8001e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8087 	beq.w	8001f4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e40:	4b36      	ldr	r3, [pc, #216]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d061      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d146      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b33      	ldr	r3, [pc, #204]	@ (8001f24 <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7ff f8eb 	bl	8001034 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7ff f8e7 	bl	8001034 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e06d      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e74:	4b29      	ldr	r3, [pc, #164]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e88:	d108      	bne.n	8001e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e8a:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4921      	ldr	r1, [pc, #132]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a19      	ldr	r1, [r3, #32]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	430b      	orrs	r3, r1
 8001eae:	491b      	ldr	r1, [pc, #108]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_RCC_OscConfig+0x4cc>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff f8bb 	bl	8001034 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff f8b7 	bl	8001034 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e03d      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x46a>
 8001ee0:	e035      	b.n	8001f4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_RCC_OscConfig+0x4cc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f8a4 	bl	8001034 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff f8a0 	bl	8001034 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e026      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x498>
 8001f0e:	e01e      	b.n	8001f4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e019      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40007000 	.word	0x40007000
 8001f24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_RCC_OscConfig+0x500>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0d0      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f70:	4b6a      	ldr	r3, [pc, #424]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d910      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b67      	ldr	r3, [pc, #412]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 0207 	bic.w	r2, r3, #7
 8001f86:	4965      	ldr	r1, [pc, #404]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b63      	ldr	r3, [pc, #396]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0b8      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb8:	4b59      	ldr	r3, [pc, #356]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a58      	ldr	r2, [pc, #352]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd0:	4b53      	ldr	r3, [pc, #332]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a52      	ldr	r2, [pc, #328]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b50      	ldr	r3, [pc, #320]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	494d      	ldr	r1, [pc, #308]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d040      	beq.n	800207c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d115      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e07f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	4b41      	ldr	r3, [pc, #260]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e073      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202a:	4b3d      	ldr	r3, [pc, #244]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06b      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203a:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f023 0203 	bic.w	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4936      	ldr	r1, [pc, #216]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800204c:	f7fe fff2 	bl	8001034 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	e00a      	b.n	800206a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002054:	f7fe ffee 	bl	8001034 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e053      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 020c 	and.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	429a      	cmp	r2, r3
 800207a:	d1eb      	bne.n	8002054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800207c:	4b27      	ldr	r3, [pc, #156]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d210      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b24      	ldr	r3, [pc, #144]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4922      	ldr	r1, [pc, #136]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b20      	ldr	r3, [pc, #128]	@ (800211c <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e032      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4916      	ldr	r1, [pc, #88]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020d6:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	490e      	ldr	r1, [pc, #56]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ea:	f000 f821 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	490a      	ldr	r1, [pc, #40]	@ (8002124 <HAL_RCC_ClockConfig+0x1c8>)
 80020fc:	5ccb      	ldrb	r3, [r1, r3]
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	4a09      	ldr	r2, [pc, #36]	@ (8002128 <HAL_RCC_ClockConfig+0x1cc>)
 8002104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_RCC_ClockConfig+0x1d0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe ff50 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
 8002124:	080043bc 	.word	0x080043bc
 8002128:	20000000 	.word	0x20000000
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800214a:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b04      	cmp	r3, #4
 8002158:	d002      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x30>
 800215a:	2b08      	cmp	r3, #8
 800215c:	d003      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0x36>
 800215e:	e027      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002162:	613b      	str	r3, [r7, #16]
      break;
 8002164:	e027      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0c9b      	lsrs	r3, r3, #18
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	4a17      	ldr	r2, [pc, #92]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d010      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0c5b      	lsrs	r3, r3, #17
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	4a11      	ldr	r2, [pc, #68]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002192:	fb03 f202 	mul.w	r2, r3, r2
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e004      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0c      	ldr	r2, [pc, #48]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	613b      	str	r3, [r7, #16]
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021b2:	613b      	str	r3, [r7, #16]
      break;
 80021b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b6:	693b      	ldr	r3, [r7, #16]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	007a1200 	.word	0x007a1200
 80021cc:	080043d4 	.word	0x080043d4
 80021d0:	080043e4 	.word	0x080043e4
 80021d4:	003d0900 	.word	0x003d0900

080021d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b02      	ldr	r3, [pc, #8]	@ (80021e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f0:	f7ff fff2 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4903      	ldr	r1, [pc, #12]	@ (8002210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	080043cc 	.word	0x080043cc

08002214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002218:	f7ff ffde 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	0adb      	lsrs	r3, r3, #11
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	@ (8002238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	080043cc 	.word	0x080043cc

0800223c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002244:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <RCC_Delay+0x34>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <RCC_Delay+0x38>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0a5b      	lsrs	r3, r3, #9
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002258:	bf00      	nop
  }
  while (Delay --);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	60fa      	str	r2, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f9      	bne.n	8002258 <RCC_Delay+0x1c>
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000000 	.word	0x20000000
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e041      	b.n	800230e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fca4 	bl	8000bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3304      	adds	r3, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4610      	mov	r0, r2
 80022b8:	f000 fa64 	bl	8002784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d001      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e03a      	b.n	80023a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a18      	ldr	r2, [pc, #96]	@ (80023b0 <HAL_TIM_Base_Start_IT+0x98>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00e      	beq.n	8002370 <HAL_TIM_Base_Start_IT+0x58>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800235a:	d009      	beq.n	8002370 <HAL_TIM_Base_Start_IT+0x58>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d004      	beq.n	8002370 <HAL_TIM_Base_Start_IT+0x58>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a13      	ldr	r2, [pc, #76]	@ (80023b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d111      	bne.n	8002394 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b06      	cmp	r3, #6
 8002380:	d010      	beq.n	80023a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002392:	e007      	b.n	80023a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800

080023bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d020      	beq.n	8002420 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0202 	mvn.w	r2, #2
 80023f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f9a1 	bl	800274e <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f994 	bl	800273c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f9a3 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d020      	beq.n	800246c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0204 	mvn.w	r2, #4
 800243c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f97b 	bl	800274e <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f96e 	bl	800273c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f97d 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d020      	beq.n	80024b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0208 	mvn.w	r2, #8
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2204      	movs	r2, #4
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f955 	bl	800274e <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f948 	bl	800273c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f957 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d020      	beq.n	8002504 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0210 	mvn.w	r2, #16
 80024d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2208      	movs	r2, #8
 80024da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f92f 	bl	800274e <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f922 	bl	800273c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f931 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00c      	beq.n	8002528 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0201 	mvn.w	r2, #1
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f901 	bl	800272a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa87 	bl	8002a5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00c      	beq.n	8002570 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f901 	bl	8002772 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00c      	beq.n	8002594 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0220 	mvn.w	r2, #32
 800258c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fa5a 	bl	8002a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_TIM_ConfigClockSource+0x1c>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e0b4      	b.n	8002722 <HAL_TIM_ConfigClockSource+0x186>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025f0:	d03e      	beq.n	8002670 <HAL_TIM_ConfigClockSource+0xd4>
 80025f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025f6:	f200 8087 	bhi.w	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 80025fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025fe:	f000 8086 	beq.w	800270e <HAL_TIM_ConfigClockSource+0x172>
 8002602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002606:	d87f      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b70      	cmp	r3, #112	@ 0x70
 800260a:	d01a      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0xa6>
 800260c:	2b70      	cmp	r3, #112	@ 0x70
 800260e:	d87b      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002610:	2b60      	cmp	r3, #96	@ 0x60
 8002612:	d050      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x11a>
 8002614:	2b60      	cmp	r3, #96	@ 0x60
 8002616:	d877      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002618:	2b50      	cmp	r3, #80	@ 0x50
 800261a:	d03c      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0xfa>
 800261c:	2b50      	cmp	r3, #80	@ 0x50
 800261e:	d873      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002620:	2b40      	cmp	r3, #64	@ 0x40
 8002622:	d058      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x13a>
 8002624:	2b40      	cmp	r3, #64	@ 0x40
 8002626:	d86f      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002628:	2b30      	cmp	r3, #48	@ 0x30
 800262a:	d064      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x15a>
 800262c:	2b30      	cmp	r3, #48	@ 0x30
 800262e:	d86b      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002630:	2b20      	cmp	r3, #32
 8002632:	d060      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002634:	2b20      	cmp	r3, #32
 8002636:	d867      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002638:	2b00      	cmp	r3, #0
 800263a:	d05c      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x15a>
 800263c:	2b10      	cmp	r3, #16
 800263e:	d05a      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002640:	e062      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002652:	f000 f97c 	bl	800294e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	609a      	str	r2, [r3, #8]
      break;
 800266e:	e04f      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002680:	f000 f965 	bl	800294e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002692:	609a      	str	r2, [r3, #8]
      break;
 8002694:	e03c      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	461a      	mov	r2, r3
 80026a4:	f000 f8dc 	bl	8002860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2150      	movs	r1, #80	@ 0x50
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f933 	bl	800291a <TIM_ITRx_SetConfig>
      break;
 80026b4:	e02c      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c2:	461a      	mov	r2, r3
 80026c4:	f000 f8fa 	bl	80028bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2160      	movs	r1, #96	@ 0x60
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f923 	bl	800291a <TIM_ITRx_SetConfig>
      break;
 80026d4:	e01c      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	461a      	mov	r2, r3
 80026e4:	f000 f8bc 	bl	8002860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2140      	movs	r1, #64	@ 0x40
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f913 	bl	800291a <TIM_ITRx_SetConfig>
      break;
 80026f4:	e00c      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4619      	mov	r1, r3
 8002700:	4610      	mov	r0, r2
 8002702:	f000 f90a 	bl	800291a <TIM_ITRx_SetConfig>
      break;
 8002706:	e003      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      break;
 800270c:	e000      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800270e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002720:	7bfb      	ldrb	r3, [r7, #15]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a2f      	ldr	r2, [pc, #188]	@ (8002854 <TIM_Base_SetConfig+0xd0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00b      	beq.n	80027b4 <TIM_Base_SetConfig+0x30>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a2:	d007      	beq.n	80027b4 <TIM_Base_SetConfig+0x30>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002858 <TIM_Base_SetConfig+0xd4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d003      	beq.n	80027b4 <TIM_Base_SetConfig+0x30>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a2b      	ldr	r2, [pc, #172]	@ (800285c <TIM_Base_SetConfig+0xd8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d108      	bne.n	80027c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a22      	ldr	r2, [pc, #136]	@ (8002854 <TIM_Base_SetConfig+0xd0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00b      	beq.n	80027e6 <TIM_Base_SetConfig+0x62>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d4:	d007      	beq.n	80027e6 <TIM_Base_SetConfig+0x62>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002858 <TIM_Base_SetConfig+0xd4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d003      	beq.n	80027e6 <TIM_Base_SetConfig+0x62>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1e      	ldr	r2, [pc, #120]	@ (800285c <TIM_Base_SetConfig+0xd8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d108      	bne.n	80027f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a0d      	ldr	r2, [pc, #52]	@ (8002854 <TIM_Base_SetConfig+0xd0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d103      	bne.n	800282c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f023 0201 	bic.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	611a      	str	r2, [r3, #16]
  }
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40000400 	.word	0x40000400
 800285c:	40000800 	.word	0x40000800

08002860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f023 0201 	bic.w	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800288a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f023 030a 	bic.w	r3, r3, #10
 800289c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	f023 0210 	bic.w	r2, r3, #16
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	031b      	lsls	r3, r3, #12
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80028f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	621a      	str	r2, [r3, #32]
}
 8002910:	bf00      	nop
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	f043 0307 	orr.w	r3, r3, #7
 800293c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800294e:	b480      	push	{r7}
 8002950:	b087      	sub	sp, #28
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002968:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	021a      	lsls	r2, r3, #8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	431a      	orrs	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4313      	orrs	r3, r2
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	609a      	str	r2, [r3, #8]
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e046      	b.n	8002a32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a16      	ldr	r2, [pc, #88]	@ (8002a3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00e      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f0:	d009      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a12      	ldr	r2, [pc, #72]	@ (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d004      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a10      	ldr	r2, [pc, #64]	@ (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d10c      	bne.n	8002a20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800

08002a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e042      	b.n	8002b04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe f8ea 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2224      	movs	r2, #36	@ 0x24
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fdf9 	bl	80036a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	@ 0x28
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d175      	bne.n	8002c18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_UART_Transmit+0x2c>
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e06e      	b.n	8002c1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2221      	movs	r2, #33	@ 0x21
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe fa73 	bl	8001034 <HAL_GetTick>
 8002b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	88fa      	ldrh	r2, [r7, #6]
 8002b54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	88fa      	ldrh	r2, [r7, #6]
 8002b5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b64:	d108      	bne.n	8002b78 <HAL_UART_Transmit+0x6c>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d104      	bne.n	8002b78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	e003      	b.n	8002b80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b80:	e02e      	b.n	8002be0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2180      	movs	r1, #128	@ 0x80
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fb97 	bl	80032c0 <UART_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e03a      	b.n	8002c1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	3302      	adds	r3, #2
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	e007      	b.n	8002bd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	781a      	ldrb	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1cb      	bne.n	8002b82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2140      	movs	r1, #64	@ 0x40
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fb63 	bl	80032c0 <UART_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e006      	b.n	8002c1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
  }
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b08a      	sub	sp, #40	@ 0x28
 8002c26:	af02      	add	r7, sp, #8
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	603b      	str	r3, [r7, #0]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	f040 8081 	bne.w	8002d46 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_UART_Receive+0x2e>
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e079      	b.n	8002d48 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2222      	movs	r2, #34	@ 0x22
 8002c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c68:	f7fe f9e4 	bl	8001034 <HAL_GetTick>
 8002c6c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c82:	d108      	bne.n	8002c96 <HAL_UART_Receive+0x74>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	e003      	b.n	8002c9e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c9e:	e047      	b.n	8002d30 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2120      	movs	r1, #32
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fb08 	bl	80032c0 <UART_WaitOnFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e042      	b.n	8002d48 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	3302      	adds	r3, #2
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	e01f      	b.n	8002d22 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cea:	d007      	beq.n	8002cfc <HAL_UART_Receive+0xda>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_UART_Receive+0xe8>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e008      	b.n	8002d1c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1b2      	bne.n	8002ca0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
  }
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3720      	adds	r7, #32
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b0ba      	sub	sp, #232	@ 0xe8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10f      	bne.n	8002db6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_UART_IRQHandler+0x66>
 8002da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fbbc 	bl	800352c <UART_Receive_IT>
      return;
 8002db4:	e25b      	b.n	800326e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80de 	beq.w	8002f7c <HAL_UART_IRQHandler+0x22c>
 8002dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80d1 	beq.w	8002f7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_UART_IRQHandler+0xae>
 8002de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_UART_IRQHandler+0xd2>
 8002e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	f043 0202 	orr.w	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <HAL_UART_IRQHandler+0xf6>
 8002e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f043 0204 	orr.w	r2, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d011      	beq.n	8002e76 <HAL_UART_IRQHandler+0x126>
 8002e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	f043 0208 	orr.w	r2, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 81f2 	beq.w	8003264 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_UART_IRQHandler+0x14e>
 8002e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fb47 	bl	800352c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d103      	bne.n	8002eca <HAL_UART_IRQHandler+0x17a>
 8002ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d04f      	beq.n	8002f6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fa51 	bl	8003372 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d041      	beq.n	8002f62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3314      	adds	r3, #20
 8002ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3314      	adds	r3, #20
 8002f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1d9      	bne.n	8002ede <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d013      	beq.n	8002f5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f36:	4a7e      	ldr	r2, [pc, #504]	@ (8003130 <HAL_UART_IRQHandler+0x3e0>)
 8002f38:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe f9ee 	bl	8001320 <HAL_DMA_Abort_IT>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f54:	4610      	mov	r0, r2
 8002f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	e00e      	b.n	8002f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f99c 	bl	8003298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	e00a      	b.n	8002f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f998 	bl	8003298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	e006      	b.n	8002f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f994 	bl	8003298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f76:	e175      	b.n	8003264 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	bf00      	nop
    return;
 8002f7a:	e173      	b.n	8003264 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	f040 814f 	bne.w	8003224 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8148 	beq.w	8003224 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8141 	beq.w	8003224 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80b6 	beq.w	8003134 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8145 	beq.w	8003268 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	f080 813e 	bcs.w	8003268 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ff2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	f000 8088 	beq.w	8003110 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	330c      	adds	r3, #12
 8003006:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003016:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800301a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800301e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800302c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003030:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003034:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003038:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800303c:	e841 2300 	strex	r3, r2, [r1]
 8003040:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1d9      	bne.n	8003000 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3314      	adds	r3, #20
 8003052:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003056:	e853 3f00 	ldrex	r3, [r3]
 800305a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800305c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3314      	adds	r3, #20
 800306c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003070:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003074:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003078:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003082:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e1      	bne.n	800304c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3314      	adds	r3, #20
 800308e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003098:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800309a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800309e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3314      	adds	r3, #20
 80030a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e3      	bne.n	8003088 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	330c      	adds	r3, #12
 80030d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030e0:	f023 0310 	bic.w	r3, r3, #16
 80030e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030f4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030fa:	e841 2300 	strex	r3, r2, [r1]
 80030fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e3      	bne.n	80030ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe f8cd 	bl	80012aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800311e:	b29b      	uxth	r3, r3
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	b29b      	uxth	r3, r3
 8003124:	4619      	mov	r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f8bf 	bl	80032aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800312c:	e09c      	b.n	8003268 <HAL_UART_IRQHandler+0x518>
 800312e:	bf00      	nop
 8003130:	08003437 	.word	0x08003437
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800313c:	b29b      	uxth	r3, r3
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 808e 	beq.w	800326c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8089 	beq.w	800326c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800316a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003170:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800317e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003180:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800318c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e3      	bne.n	800315a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3314      	adds	r3, #20
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	e853 3f00 	ldrex	r3, [r3]
 80031a0:	623b      	str	r3, [r7, #32]
   return(result);
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3314      	adds	r3, #20
 80031b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80031b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e3      	bne.n	8003192 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	330c      	adds	r3, #12
 80031de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	e853 3f00 	ldrex	r3, [r3]
 80031e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0310 	bic.w	r3, r3, #16
 80031ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80031fc:	61fa      	str	r2, [r7, #28]
 80031fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	69b9      	ldr	r1, [r7, #24]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	617b      	str	r3, [r7, #20]
   return(result);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e3      	bne.n	80031d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003216:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f844 	bl	80032aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003222:	e023      	b.n	800326c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322c:	2b00      	cmp	r3, #0
 800322e:	d009      	beq.n	8003244 <HAL_UART_IRQHandler+0x4f4>
 8003230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f90e 	bl	800345e <UART_Transmit_IT>
    return;
 8003242:	e014      	b.n	800326e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <HAL_UART_IRQHandler+0x51e>
 8003250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f94d 	bl	80034fc <UART_EndTransmit_IT>
    return;
 8003262:	e004      	b.n	800326e <HAL_UART_IRQHandler+0x51e>
    return;
 8003264:	bf00      	nop
 8003266:	e002      	b.n	800326e <HAL_UART_IRQHandler+0x51e>
      return;
 8003268:	bf00      	nop
 800326a:	e000      	b.n	800326e <HAL_UART_IRQHandler+0x51e>
      return;
 800326c:	bf00      	nop
  }
}
 800326e:	37e8      	adds	r7, #232	@ 0xe8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	460b      	mov	r3, r1
 80032b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d0:	e03b      	b.n	800334a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d037      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fd feab 	bl	8001034 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	6a3a      	ldr	r2, [r7, #32]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e03a      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d023      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b80      	cmp	r3, #128	@ 0x80
 8003306:	d020      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b40      	cmp	r3, #64	@ 0x40
 800330c:	d01d      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b08      	cmp	r3, #8
 800331a:	d116      	bne.n	800334a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f81d 	bl	8003372 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2208      	movs	r2, #8
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e00f      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4013      	ands	r3, r2
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	429a      	cmp	r2, r3
 8003358:	bf0c      	ite	eq
 800335a:	2301      	moveq	r3, #1
 800335c:	2300      	movne	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	429a      	cmp	r2, r3
 8003366:	d0b4      	beq.n	80032d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003372:	b480      	push	{r7}
 8003374:	b095      	sub	sp, #84	@ 0x54
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	330c      	adds	r3, #12
 8003398:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800339a:	643a      	str	r2, [r7, #64]	@ 0x40
 800339c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e5      	bne.n	800337a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3314      	adds	r3, #20
 80033b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3314      	adds	r3, #20
 80033cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e5      	bne.n	80033ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d119      	bne.n	800341e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	330c      	adds	r3, #12
 80033f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	e853 3f00 	ldrex	r3, [r3]
 80033f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f023 0310 	bic.w	r3, r3, #16
 8003400:	647b      	str	r3, [r7, #68]	@ 0x44
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800340a:	61ba      	str	r2, [r7, #24]
 800340c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	6979      	ldr	r1, [r7, #20]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	613b      	str	r3, [r7, #16]
   return(result);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e5      	bne.n	80033ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800342c:	bf00      	nop
 800342e:	3754      	adds	r7, #84	@ 0x54
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff ff21 	bl	8003298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b21      	cmp	r3, #33	@ 0x21
 8003470:	d13e      	bne.n	80034f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347a:	d114      	bne.n	80034a6 <UART_Transmit_IT+0x48>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d110      	bne.n	80034a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003498:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	1c9a      	adds	r2, r3, #2
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]
 80034a4:	e008      	b.n	80034b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	1c59      	adds	r1, r3, #1
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6211      	str	r1, [r2, #32]
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4619      	mov	r1, r3
 80034c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10f      	bne.n	80034ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003512:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fea9 	bl	8003274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08c      	sub	sp, #48	@ 0x30
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b22      	cmp	r3, #34	@ 0x22
 800353e:	f040 80ae 	bne.w	800369e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800354a:	d117      	bne.n	800357c <UART_Receive_IT+0x50>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d113      	bne.n	800357c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	b29b      	uxth	r3, r3
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356a:	b29a      	uxth	r2, r3
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003574:	1c9a      	adds	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	629a      	str	r2, [r3, #40]	@ 0x28
 800357a:	e026      	b.n	80035ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003580:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358e:	d007      	beq.n	80035a0 <UART_Receive_IT+0x74>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <UART_Receive_IT+0x82>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	e008      	b.n	80035c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4619      	mov	r1, r3
 80035d8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d15d      	bne.n	800369a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0220 	bic.w	r2, r2, #32
 80035ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003620:	2b01      	cmp	r3, #1
 8003622:	d135      	bne.n	8003690 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	330c      	adds	r3, #12
 8003630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	613b      	str	r3, [r7, #16]
   return(result);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f023 0310 	bic.w	r3, r3, #16
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364a:	623a      	str	r2, [r7, #32]
 800364c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	69f9      	ldr	r1, [r7, #28]
 8003650:	6a3a      	ldr	r2, [r7, #32]
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	61bb      	str	r3, [r7, #24]
   return(result);
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e5      	bne.n	800362a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b10      	cmp	r3, #16
 800366a:	d10a      	bne.n	8003682 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff fe0e 	bl	80032aa <HAL_UARTEx_RxEventCallback>
 800368e:	e002      	b.n	8003696 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff fdf8 	bl	8003286 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	e002      	b.n	80036a0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e000      	b.n	80036a0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800369e:	2302      	movs	r3, #2
  }
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3730      	adds	r7, #48	@ 0x30
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80036e2:	f023 030c 	bic.w	r3, r3, #12
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2c      	ldr	r2, [pc, #176]	@ (80037bc <UART_SetConfig+0x114>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d103      	bne.n	8003718 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003710:	f7fe fd80 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	e002      	b.n	800371e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003718:	f7fe fd68 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 800371c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009a      	lsls	r2, r3, #2
 8003728:	441a      	add	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	4a22      	ldr	r2, [pc, #136]	@ (80037c0 <UART_SetConfig+0x118>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	0119      	lsls	r1, r3, #4
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009a      	lsls	r2, r3, #2
 8003748:	441a      	add	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	fbb2 f2f3 	udiv	r2, r2, r3
 8003754:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <UART_SetConfig+0x118>)
 8003756:	fba3 0302 	umull	r0, r3, r3, r2
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2064      	movs	r0, #100	@ 0x64
 800375e:	fb00 f303 	mul.w	r3, r0, r3
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	3332      	adds	r3, #50	@ 0x32
 8003768:	4a15      	ldr	r2, [pc, #84]	@ (80037c0 <UART_SetConfig+0x118>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003774:	4419      	add	r1, r3
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009a      	lsls	r2, r3, #2
 8003780:	441a      	add	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	fbb2 f2f3 	udiv	r2, r2, r3
 800378c:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <UART_SetConfig+0x118>)
 800378e:	fba3 0302 	umull	r0, r3, r3, r2
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2064      	movs	r0, #100	@ 0x64
 8003796:	fb00 f303 	mul.w	r3, r0, r3
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	3332      	adds	r3, #50	@ 0x32
 80037a0:	4a07      	ldr	r2, [pc, #28]	@ (80037c0 <UART_SetConfig+0x118>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	f003 020f 	and.w	r2, r3, #15
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	440a      	add	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40013800 	.word	0x40013800
 80037c0:	51eb851f 	.word	0x51eb851f

080037c4 <siprintf>:
 80037c4:	b40e      	push	{r1, r2, r3}
 80037c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037ca:	b500      	push	{lr}
 80037cc:	b09c      	sub	sp, #112	@ 0x70
 80037ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80037d0:	9002      	str	r0, [sp, #8]
 80037d2:	9006      	str	r0, [sp, #24]
 80037d4:	9107      	str	r1, [sp, #28]
 80037d6:	9104      	str	r1, [sp, #16]
 80037d8:	4808      	ldr	r0, [pc, #32]	@ (80037fc <siprintf+0x38>)
 80037da:	4909      	ldr	r1, [pc, #36]	@ (8003800 <siprintf+0x3c>)
 80037dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80037e0:	9105      	str	r1, [sp, #20]
 80037e2:	6800      	ldr	r0, [r0, #0]
 80037e4:	a902      	add	r1, sp, #8
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	f000 f992 	bl	8003b10 <_svfiprintf_r>
 80037ec:	2200      	movs	r2, #0
 80037ee:	9b02      	ldr	r3, [sp, #8]
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	b01c      	add	sp, #112	@ 0x70
 80037f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037f8:	b003      	add	sp, #12
 80037fa:	4770      	bx	lr
 80037fc:	2000000c 	.word	0x2000000c
 8003800:	ffff0208 	.word	0xffff0208

08003804 <memset>:
 8003804:	4603      	mov	r3, r0
 8003806:	4402      	add	r2, r0
 8003808:	4293      	cmp	r3, r2
 800380a:	d100      	bne.n	800380e <memset+0xa>
 800380c:	4770      	bx	lr
 800380e:	f803 1b01 	strb.w	r1, [r3], #1
 8003812:	e7f9      	b.n	8003808 <memset+0x4>

08003814 <__errno>:
 8003814:	4b01      	ldr	r3, [pc, #4]	@ (800381c <__errno+0x8>)
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	2000000c 	.word	0x2000000c

08003820 <__libc_init_array>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	2600      	movs	r6, #0
 8003824:	4d0c      	ldr	r5, [pc, #48]	@ (8003858 <__libc_init_array+0x38>)
 8003826:	4c0d      	ldr	r4, [pc, #52]	@ (800385c <__libc_init_array+0x3c>)
 8003828:	1b64      	subs	r4, r4, r5
 800382a:	10a4      	asrs	r4, r4, #2
 800382c:	42a6      	cmp	r6, r4
 800382e:	d109      	bne.n	8003844 <__libc_init_array+0x24>
 8003830:	f000 fc78 	bl	8004124 <_init>
 8003834:	2600      	movs	r6, #0
 8003836:	4d0a      	ldr	r5, [pc, #40]	@ (8003860 <__libc_init_array+0x40>)
 8003838:	4c0a      	ldr	r4, [pc, #40]	@ (8003864 <__libc_init_array+0x44>)
 800383a:	1b64      	subs	r4, r4, r5
 800383c:	10a4      	asrs	r4, r4, #2
 800383e:	42a6      	cmp	r6, r4
 8003840:	d105      	bne.n	800384e <__libc_init_array+0x2e>
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	f855 3b04 	ldr.w	r3, [r5], #4
 8003848:	4798      	blx	r3
 800384a:	3601      	adds	r6, #1
 800384c:	e7ee      	b.n	800382c <__libc_init_array+0xc>
 800384e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003852:	4798      	blx	r3
 8003854:	3601      	adds	r6, #1
 8003856:	e7f2      	b.n	800383e <__libc_init_array+0x1e>
 8003858:	08004424 	.word	0x08004424
 800385c:	08004424 	.word	0x08004424
 8003860:	08004424 	.word	0x08004424
 8003864:	08004428 	.word	0x08004428

08003868 <__retarget_lock_acquire_recursive>:
 8003868:	4770      	bx	lr

0800386a <__retarget_lock_release_recursive>:
 800386a:	4770      	bx	lr

0800386c <_free_r>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	4605      	mov	r5, r0
 8003870:	2900      	cmp	r1, #0
 8003872:	d040      	beq.n	80038f6 <_free_r+0x8a>
 8003874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003878:	1f0c      	subs	r4, r1, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	bfb8      	it	lt
 800387e:	18e4      	addlt	r4, r4, r3
 8003880:	f000 f8de 	bl	8003a40 <__malloc_lock>
 8003884:	4a1c      	ldr	r2, [pc, #112]	@ (80038f8 <_free_r+0x8c>)
 8003886:	6813      	ldr	r3, [r2, #0]
 8003888:	b933      	cbnz	r3, 8003898 <_free_r+0x2c>
 800388a:	6063      	str	r3, [r4, #4]
 800388c:	6014      	str	r4, [r2, #0]
 800388e:	4628      	mov	r0, r5
 8003890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003894:	f000 b8da 	b.w	8003a4c <__malloc_unlock>
 8003898:	42a3      	cmp	r3, r4
 800389a:	d908      	bls.n	80038ae <_free_r+0x42>
 800389c:	6820      	ldr	r0, [r4, #0]
 800389e:	1821      	adds	r1, r4, r0
 80038a0:	428b      	cmp	r3, r1
 80038a2:	bf01      	itttt	eq
 80038a4:	6819      	ldreq	r1, [r3, #0]
 80038a6:	685b      	ldreq	r3, [r3, #4]
 80038a8:	1809      	addeq	r1, r1, r0
 80038aa:	6021      	streq	r1, [r4, #0]
 80038ac:	e7ed      	b.n	800388a <_free_r+0x1e>
 80038ae:	461a      	mov	r2, r3
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	b10b      	cbz	r3, 80038b8 <_free_r+0x4c>
 80038b4:	42a3      	cmp	r3, r4
 80038b6:	d9fa      	bls.n	80038ae <_free_r+0x42>
 80038b8:	6811      	ldr	r1, [r2, #0]
 80038ba:	1850      	adds	r0, r2, r1
 80038bc:	42a0      	cmp	r0, r4
 80038be:	d10b      	bne.n	80038d8 <_free_r+0x6c>
 80038c0:	6820      	ldr	r0, [r4, #0]
 80038c2:	4401      	add	r1, r0
 80038c4:	1850      	adds	r0, r2, r1
 80038c6:	4283      	cmp	r3, r0
 80038c8:	6011      	str	r1, [r2, #0]
 80038ca:	d1e0      	bne.n	800388e <_free_r+0x22>
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4408      	add	r0, r1
 80038d2:	6010      	str	r0, [r2, #0]
 80038d4:	6053      	str	r3, [r2, #4]
 80038d6:	e7da      	b.n	800388e <_free_r+0x22>
 80038d8:	d902      	bls.n	80038e0 <_free_r+0x74>
 80038da:	230c      	movs	r3, #12
 80038dc:	602b      	str	r3, [r5, #0]
 80038de:	e7d6      	b.n	800388e <_free_r+0x22>
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	1821      	adds	r1, r4, r0
 80038e4:	428b      	cmp	r3, r1
 80038e6:	bf01      	itttt	eq
 80038e8:	6819      	ldreq	r1, [r3, #0]
 80038ea:	685b      	ldreq	r3, [r3, #4]
 80038ec:	1809      	addeq	r1, r1, r0
 80038ee:	6021      	streq	r1, [r4, #0]
 80038f0:	6063      	str	r3, [r4, #4]
 80038f2:	6054      	str	r4, [r2, #4]
 80038f4:	e7cb      	b.n	800388e <_free_r+0x22>
 80038f6:	bd38      	pop	{r3, r4, r5, pc}
 80038f8:	20000adc 	.word	0x20000adc

080038fc <sbrk_aligned>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4e0f      	ldr	r6, [pc, #60]	@ (800393c <sbrk_aligned+0x40>)
 8003900:	460c      	mov	r4, r1
 8003902:	6831      	ldr	r1, [r6, #0]
 8003904:	4605      	mov	r5, r0
 8003906:	b911      	cbnz	r1, 800390e <sbrk_aligned+0x12>
 8003908:	f000 fbaa 	bl	8004060 <_sbrk_r>
 800390c:	6030      	str	r0, [r6, #0]
 800390e:	4621      	mov	r1, r4
 8003910:	4628      	mov	r0, r5
 8003912:	f000 fba5 	bl	8004060 <_sbrk_r>
 8003916:	1c43      	adds	r3, r0, #1
 8003918:	d103      	bne.n	8003922 <sbrk_aligned+0x26>
 800391a:	f04f 34ff 	mov.w	r4, #4294967295
 800391e:	4620      	mov	r0, r4
 8003920:	bd70      	pop	{r4, r5, r6, pc}
 8003922:	1cc4      	adds	r4, r0, #3
 8003924:	f024 0403 	bic.w	r4, r4, #3
 8003928:	42a0      	cmp	r0, r4
 800392a:	d0f8      	beq.n	800391e <sbrk_aligned+0x22>
 800392c:	1a21      	subs	r1, r4, r0
 800392e:	4628      	mov	r0, r5
 8003930:	f000 fb96 	bl	8004060 <_sbrk_r>
 8003934:	3001      	adds	r0, #1
 8003936:	d1f2      	bne.n	800391e <sbrk_aligned+0x22>
 8003938:	e7ef      	b.n	800391a <sbrk_aligned+0x1e>
 800393a:	bf00      	nop
 800393c:	20000ad8 	.word	0x20000ad8

08003940 <_malloc_r>:
 8003940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003944:	1ccd      	adds	r5, r1, #3
 8003946:	f025 0503 	bic.w	r5, r5, #3
 800394a:	3508      	adds	r5, #8
 800394c:	2d0c      	cmp	r5, #12
 800394e:	bf38      	it	cc
 8003950:	250c      	movcc	r5, #12
 8003952:	2d00      	cmp	r5, #0
 8003954:	4606      	mov	r6, r0
 8003956:	db01      	blt.n	800395c <_malloc_r+0x1c>
 8003958:	42a9      	cmp	r1, r5
 800395a:	d904      	bls.n	8003966 <_malloc_r+0x26>
 800395c:	230c      	movs	r3, #12
 800395e:	6033      	str	r3, [r6, #0]
 8003960:	2000      	movs	r0, #0
 8003962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a3c <_malloc_r+0xfc>
 800396a:	f000 f869 	bl	8003a40 <__malloc_lock>
 800396e:	f8d8 3000 	ldr.w	r3, [r8]
 8003972:	461c      	mov	r4, r3
 8003974:	bb44      	cbnz	r4, 80039c8 <_malloc_r+0x88>
 8003976:	4629      	mov	r1, r5
 8003978:	4630      	mov	r0, r6
 800397a:	f7ff ffbf 	bl	80038fc <sbrk_aligned>
 800397e:	1c43      	adds	r3, r0, #1
 8003980:	4604      	mov	r4, r0
 8003982:	d158      	bne.n	8003a36 <_malloc_r+0xf6>
 8003984:	f8d8 4000 	ldr.w	r4, [r8]
 8003988:	4627      	mov	r7, r4
 800398a:	2f00      	cmp	r7, #0
 800398c:	d143      	bne.n	8003a16 <_malloc_r+0xd6>
 800398e:	2c00      	cmp	r4, #0
 8003990:	d04b      	beq.n	8003a2a <_malloc_r+0xea>
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	4639      	mov	r1, r7
 8003996:	4630      	mov	r0, r6
 8003998:	eb04 0903 	add.w	r9, r4, r3
 800399c:	f000 fb60 	bl	8004060 <_sbrk_r>
 80039a0:	4581      	cmp	r9, r0
 80039a2:	d142      	bne.n	8003a2a <_malloc_r+0xea>
 80039a4:	6821      	ldr	r1, [r4, #0]
 80039a6:	4630      	mov	r0, r6
 80039a8:	1a6d      	subs	r5, r5, r1
 80039aa:	4629      	mov	r1, r5
 80039ac:	f7ff ffa6 	bl	80038fc <sbrk_aligned>
 80039b0:	3001      	adds	r0, #1
 80039b2:	d03a      	beq.n	8003a2a <_malloc_r+0xea>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	442b      	add	r3, r5
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	f8d8 3000 	ldr.w	r3, [r8]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	bb62      	cbnz	r2, 8003a1c <_malloc_r+0xdc>
 80039c2:	f8c8 7000 	str.w	r7, [r8]
 80039c6:	e00f      	b.n	80039e8 <_malloc_r+0xa8>
 80039c8:	6822      	ldr	r2, [r4, #0]
 80039ca:	1b52      	subs	r2, r2, r5
 80039cc:	d420      	bmi.n	8003a10 <_malloc_r+0xd0>
 80039ce:	2a0b      	cmp	r2, #11
 80039d0:	d917      	bls.n	8003a02 <_malloc_r+0xc2>
 80039d2:	1961      	adds	r1, r4, r5
 80039d4:	42a3      	cmp	r3, r4
 80039d6:	6025      	str	r5, [r4, #0]
 80039d8:	bf18      	it	ne
 80039da:	6059      	strne	r1, [r3, #4]
 80039dc:	6863      	ldr	r3, [r4, #4]
 80039de:	bf08      	it	eq
 80039e0:	f8c8 1000 	streq.w	r1, [r8]
 80039e4:	5162      	str	r2, [r4, r5]
 80039e6:	604b      	str	r3, [r1, #4]
 80039e8:	4630      	mov	r0, r6
 80039ea:	f000 f82f 	bl	8003a4c <__malloc_unlock>
 80039ee:	f104 000b 	add.w	r0, r4, #11
 80039f2:	1d23      	adds	r3, r4, #4
 80039f4:	f020 0007 	bic.w	r0, r0, #7
 80039f8:	1ac2      	subs	r2, r0, r3
 80039fa:	bf1c      	itt	ne
 80039fc:	1a1b      	subne	r3, r3, r0
 80039fe:	50a3      	strne	r3, [r4, r2]
 8003a00:	e7af      	b.n	8003962 <_malloc_r+0x22>
 8003a02:	6862      	ldr	r2, [r4, #4]
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	bf0c      	ite	eq
 8003a08:	f8c8 2000 	streq.w	r2, [r8]
 8003a0c:	605a      	strne	r2, [r3, #4]
 8003a0e:	e7eb      	b.n	80039e8 <_malloc_r+0xa8>
 8003a10:	4623      	mov	r3, r4
 8003a12:	6864      	ldr	r4, [r4, #4]
 8003a14:	e7ae      	b.n	8003974 <_malloc_r+0x34>
 8003a16:	463c      	mov	r4, r7
 8003a18:	687f      	ldr	r7, [r7, #4]
 8003a1a:	e7b6      	b.n	800398a <_malloc_r+0x4a>
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	42a3      	cmp	r3, r4
 8003a22:	d1fb      	bne.n	8003a1c <_malloc_r+0xdc>
 8003a24:	2300      	movs	r3, #0
 8003a26:	6053      	str	r3, [r2, #4]
 8003a28:	e7de      	b.n	80039e8 <_malloc_r+0xa8>
 8003a2a:	230c      	movs	r3, #12
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	6033      	str	r3, [r6, #0]
 8003a30:	f000 f80c 	bl	8003a4c <__malloc_unlock>
 8003a34:	e794      	b.n	8003960 <_malloc_r+0x20>
 8003a36:	6005      	str	r5, [r0, #0]
 8003a38:	e7d6      	b.n	80039e8 <_malloc_r+0xa8>
 8003a3a:	bf00      	nop
 8003a3c:	20000adc 	.word	0x20000adc

08003a40 <__malloc_lock>:
 8003a40:	4801      	ldr	r0, [pc, #4]	@ (8003a48 <__malloc_lock+0x8>)
 8003a42:	f7ff bf11 	b.w	8003868 <__retarget_lock_acquire_recursive>
 8003a46:	bf00      	nop
 8003a48:	20000ad4 	.word	0x20000ad4

08003a4c <__malloc_unlock>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	@ (8003a54 <__malloc_unlock+0x8>)
 8003a4e:	f7ff bf0c 	b.w	800386a <__retarget_lock_release_recursive>
 8003a52:	bf00      	nop
 8003a54:	20000ad4 	.word	0x20000ad4

08003a58 <__ssputs_r>:
 8003a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	461f      	mov	r7, r3
 8003a5e:	688e      	ldr	r6, [r1, #8]
 8003a60:	4682      	mov	sl, r0
 8003a62:	42be      	cmp	r6, r7
 8003a64:	460c      	mov	r4, r1
 8003a66:	4690      	mov	r8, r2
 8003a68:	680b      	ldr	r3, [r1, #0]
 8003a6a:	d82d      	bhi.n	8003ac8 <__ssputs_r+0x70>
 8003a6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a74:	d026      	beq.n	8003ac4 <__ssputs_r+0x6c>
 8003a76:	6965      	ldr	r5, [r4, #20]
 8003a78:	6909      	ldr	r1, [r1, #16]
 8003a7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a7e:	eba3 0901 	sub.w	r9, r3, r1
 8003a82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a86:	1c7b      	adds	r3, r7, #1
 8003a88:	444b      	add	r3, r9
 8003a8a:	106d      	asrs	r5, r5, #1
 8003a8c:	429d      	cmp	r5, r3
 8003a8e:	bf38      	it	cc
 8003a90:	461d      	movcc	r5, r3
 8003a92:	0553      	lsls	r3, r2, #21
 8003a94:	d527      	bpl.n	8003ae6 <__ssputs_r+0x8e>
 8003a96:	4629      	mov	r1, r5
 8003a98:	f7ff ff52 	bl	8003940 <_malloc_r>
 8003a9c:	4606      	mov	r6, r0
 8003a9e:	b360      	cbz	r0, 8003afa <__ssputs_r+0xa2>
 8003aa0:	464a      	mov	r2, r9
 8003aa2:	6921      	ldr	r1, [r4, #16]
 8003aa4:	f000 fafa 	bl	800409c <memcpy>
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ab2:	81a3      	strh	r3, [r4, #12]
 8003ab4:	6126      	str	r6, [r4, #16]
 8003ab6:	444e      	add	r6, r9
 8003ab8:	6026      	str	r6, [r4, #0]
 8003aba:	463e      	mov	r6, r7
 8003abc:	6165      	str	r5, [r4, #20]
 8003abe:	eba5 0509 	sub.w	r5, r5, r9
 8003ac2:	60a5      	str	r5, [r4, #8]
 8003ac4:	42be      	cmp	r6, r7
 8003ac6:	d900      	bls.n	8003aca <__ssputs_r+0x72>
 8003ac8:	463e      	mov	r6, r7
 8003aca:	4632      	mov	r2, r6
 8003acc:	4641      	mov	r1, r8
 8003ace:	6820      	ldr	r0, [r4, #0]
 8003ad0:	f000 faac 	bl	800402c <memmove>
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	68a3      	ldr	r3, [r4, #8]
 8003ad8:	1b9b      	subs	r3, r3, r6
 8003ada:	60a3      	str	r3, [r4, #8]
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	4433      	add	r3, r6
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae6:	462a      	mov	r2, r5
 8003ae8:	f000 fae6 	bl	80040b8 <_realloc_r>
 8003aec:	4606      	mov	r6, r0
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d1e0      	bne.n	8003ab4 <__ssputs_r+0x5c>
 8003af2:	4650      	mov	r0, sl
 8003af4:	6921      	ldr	r1, [r4, #16]
 8003af6:	f7ff feb9 	bl	800386c <_free_r>
 8003afa:	230c      	movs	r3, #12
 8003afc:	f8ca 3000 	str.w	r3, [sl]
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	f04f 30ff 	mov.w	r0, #4294967295
 8003b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b0a:	81a3      	strh	r3, [r4, #12]
 8003b0c:	e7e9      	b.n	8003ae2 <__ssputs_r+0x8a>
	...

08003b10 <_svfiprintf_r>:
 8003b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b14:	4698      	mov	r8, r3
 8003b16:	898b      	ldrh	r3, [r1, #12]
 8003b18:	4607      	mov	r7, r0
 8003b1a:	061b      	lsls	r3, r3, #24
 8003b1c:	460d      	mov	r5, r1
 8003b1e:	4614      	mov	r4, r2
 8003b20:	b09d      	sub	sp, #116	@ 0x74
 8003b22:	d510      	bpl.n	8003b46 <_svfiprintf_r+0x36>
 8003b24:	690b      	ldr	r3, [r1, #16]
 8003b26:	b973      	cbnz	r3, 8003b46 <_svfiprintf_r+0x36>
 8003b28:	2140      	movs	r1, #64	@ 0x40
 8003b2a:	f7ff ff09 	bl	8003940 <_malloc_r>
 8003b2e:	6028      	str	r0, [r5, #0]
 8003b30:	6128      	str	r0, [r5, #16]
 8003b32:	b930      	cbnz	r0, 8003b42 <_svfiprintf_r+0x32>
 8003b34:	230c      	movs	r3, #12
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3c:	b01d      	add	sp, #116	@ 0x74
 8003b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b42:	2340      	movs	r3, #64	@ 0x40
 8003b44:	616b      	str	r3, [r5, #20]
 8003b46:	2300      	movs	r3, #0
 8003b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b50:	2330      	movs	r3, #48	@ 0x30
 8003b52:	f04f 0901 	mov.w	r9, #1
 8003b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003cf4 <_svfiprintf_r+0x1e4>
 8003b5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b62:	4623      	mov	r3, r4
 8003b64:	469a      	mov	sl, r3
 8003b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b6a:	b10a      	cbz	r2, 8003b70 <_svfiprintf_r+0x60>
 8003b6c:	2a25      	cmp	r2, #37	@ 0x25
 8003b6e:	d1f9      	bne.n	8003b64 <_svfiprintf_r+0x54>
 8003b70:	ebba 0b04 	subs.w	fp, sl, r4
 8003b74:	d00b      	beq.n	8003b8e <_svfiprintf_r+0x7e>
 8003b76:	465b      	mov	r3, fp
 8003b78:	4622      	mov	r2, r4
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	f7ff ff6b 	bl	8003a58 <__ssputs_r>
 8003b82:	3001      	adds	r0, #1
 8003b84:	f000 80a7 	beq.w	8003cd6 <_svfiprintf_r+0x1c6>
 8003b88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b8a:	445a      	add	r2, fp
 8003b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 809f 	beq.w	8003cd6 <_svfiprintf_r+0x1c6>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ba2:	f10a 0a01 	add.w	sl, sl, #1
 8003ba6:	9304      	str	r3, [sp, #16]
 8003ba8:	9307      	str	r3, [sp, #28]
 8003baa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bae:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bb0:	4654      	mov	r4, sl
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb8:	484e      	ldr	r0, [pc, #312]	@ (8003cf4 <_svfiprintf_r+0x1e4>)
 8003bba:	f000 fa61 	bl	8004080 <memchr>
 8003bbe:	9a04      	ldr	r2, [sp, #16]
 8003bc0:	b9d8      	cbnz	r0, 8003bfa <_svfiprintf_r+0xea>
 8003bc2:	06d0      	lsls	r0, r2, #27
 8003bc4:	bf44      	itt	mi
 8003bc6:	2320      	movmi	r3, #32
 8003bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bcc:	0711      	lsls	r1, r2, #28
 8003bce:	bf44      	itt	mi
 8003bd0:	232b      	movmi	r3, #43	@ 0x2b
 8003bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bdc:	d015      	beq.n	8003c0a <_svfiprintf_r+0xfa>
 8003bde:	4654      	mov	r4, sl
 8003be0:	2000      	movs	r0, #0
 8003be2:	f04f 0c0a 	mov.w	ip, #10
 8003be6:	9a07      	ldr	r2, [sp, #28]
 8003be8:	4621      	mov	r1, r4
 8003bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bee:	3b30      	subs	r3, #48	@ 0x30
 8003bf0:	2b09      	cmp	r3, #9
 8003bf2:	d94b      	bls.n	8003c8c <_svfiprintf_r+0x17c>
 8003bf4:	b1b0      	cbz	r0, 8003c24 <_svfiprintf_r+0x114>
 8003bf6:	9207      	str	r2, [sp, #28]
 8003bf8:	e014      	b.n	8003c24 <_svfiprintf_r+0x114>
 8003bfa:	eba0 0308 	sub.w	r3, r0, r8
 8003bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	46a2      	mov	sl, r4
 8003c06:	9304      	str	r3, [sp, #16]
 8003c08:	e7d2      	b.n	8003bb0 <_svfiprintf_r+0xa0>
 8003c0a:	9b03      	ldr	r3, [sp, #12]
 8003c0c:	1d19      	adds	r1, r3, #4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	9103      	str	r1, [sp, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bfbb      	ittet	lt
 8003c16:	425b      	neglt	r3, r3
 8003c18:	f042 0202 	orrlt.w	r2, r2, #2
 8003c1c:	9307      	strge	r3, [sp, #28]
 8003c1e:	9307      	strlt	r3, [sp, #28]
 8003c20:	bfb8      	it	lt
 8003c22:	9204      	strlt	r2, [sp, #16]
 8003c24:	7823      	ldrb	r3, [r4, #0]
 8003c26:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c28:	d10a      	bne.n	8003c40 <_svfiprintf_r+0x130>
 8003c2a:	7863      	ldrb	r3, [r4, #1]
 8003c2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c2e:	d132      	bne.n	8003c96 <_svfiprintf_r+0x186>
 8003c30:	9b03      	ldr	r3, [sp, #12]
 8003c32:	3402      	adds	r4, #2
 8003c34:	1d1a      	adds	r2, r3, #4
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	9203      	str	r2, [sp, #12]
 8003c3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c3e:	9305      	str	r3, [sp, #20]
 8003c40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003cf8 <_svfiprintf_r+0x1e8>
 8003c44:	2203      	movs	r2, #3
 8003c46:	4650      	mov	r0, sl
 8003c48:	7821      	ldrb	r1, [r4, #0]
 8003c4a:	f000 fa19 	bl	8004080 <memchr>
 8003c4e:	b138      	cbz	r0, 8003c60 <_svfiprintf_r+0x150>
 8003c50:	2240      	movs	r2, #64	@ 0x40
 8003c52:	9b04      	ldr	r3, [sp, #16]
 8003c54:	eba0 000a 	sub.w	r0, r0, sl
 8003c58:	4082      	lsls	r2, r0
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	3401      	adds	r4, #1
 8003c5e:	9304      	str	r3, [sp, #16]
 8003c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c64:	2206      	movs	r2, #6
 8003c66:	4825      	ldr	r0, [pc, #148]	@ (8003cfc <_svfiprintf_r+0x1ec>)
 8003c68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c6c:	f000 fa08 	bl	8004080 <memchr>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d036      	beq.n	8003ce2 <_svfiprintf_r+0x1d2>
 8003c74:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <_svfiprintf_r+0x1f0>)
 8003c76:	bb1b      	cbnz	r3, 8003cc0 <_svfiprintf_r+0x1b0>
 8003c78:	9b03      	ldr	r3, [sp, #12]
 8003c7a:	3307      	adds	r3, #7
 8003c7c:	f023 0307 	bic.w	r3, r3, #7
 8003c80:	3308      	adds	r3, #8
 8003c82:	9303      	str	r3, [sp, #12]
 8003c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c86:	4433      	add	r3, r6
 8003c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c8a:	e76a      	b.n	8003b62 <_svfiprintf_r+0x52>
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	2001      	movs	r0, #1
 8003c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c94:	e7a8      	b.n	8003be8 <_svfiprintf_r+0xd8>
 8003c96:	2300      	movs	r3, #0
 8003c98:	f04f 0c0a 	mov.w	ip, #10
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	3401      	adds	r4, #1
 8003ca0:	9305      	str	r3, [sp, #20]
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ca8:	3a30      	subs	r2, #48	@ 0x30
 8003caa:	2a09      	cmp	r2, #9
 8003cac:	d903      	bls.n	8003cb6 <_svfiprintf_r+0x1a6>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0c6      	beq.n	8003c40 <_svfiprintf_r+0x130>
 8003cb2:	9105      	str	r1, [sp, #20]
 8003cb4:	e7c4      	b.n	8003c40 <_svfiprintf_r+0x130>
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	2301      	movs	r3, #1
 8003cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cbe:	e7f0      	b.n	8003ca2 <_svfiprintf_r+0x192>
 8003cc0:	ab03      	add	r3, sp, #12
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	462a      	mov	r2, r5
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d04 <_svfiprintf_r+0x1f4>)
 8003cca:	a904      	add	r1, sp, #16
 8003ccc:	f3af 8000 	nop.w
 8003cd0:	1c42      	adds	r2, r0, #1
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	d1d6      	bne.n	8003c84 <_svfiprintf_r+0x174>
 8003cd6:	89ab      	ldrh	r3, [r5, #12]
 8003cd8:	065b      	lsls	r3, r3, #25
 8003cda:	f53f af2d 	bmi.w	8003b38 <_svfiprintf_r+0x28>
 8003cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ce0:	e72c      	b.n	8003b3c <_svfiprintf_r+0x2c>
 8003ce2:	ab03      	add	r3, sp, #12
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	462a      	mov	r2, r5
 8003ce8:	4638      	mov	r0, r7
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <_svfiprintf_r+0x1f4>)
 8003cec:	a904      	add	r1, sp, #16
 8003cee:	f000 f87d 	bl	8003dec <_printf_i>
 8003cf2:	e7ed      	b.n	8003cd0 <_svfiprintf_r+0x1c0>
 8003cf4:	080043e6 	.word	0x080043e6
 8003cf8:	080043ec 	.word	0x080043ec
 8003cfc:	080043f0 	.word	0x080043f0
 8003d00:	00000000 	.word	0x00000000
 8003d04:	08003a59 	.word	0x08003a59

08003d08 <_printf_common>:
 8003d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d0c:	4616      	mov	r6, r2
 8003d0e:	4698      	mov	r8, r3
 8003d10:	688a      	ldr	r2, [r1, #8]
 8003d12:	690b      	ldr	r3, [r1, #16]
 8003d14:	4607      	mov	r7, r0
 8003d16:	4293      	cmp	r3, r2
 8003d18:	bfb8      	it	lt
 8003d1a:	4613      	movlt	r3, r2
 8003d1c:	6033      	str	r3, [r6, #0]
 8003d1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d22:	460c      	mov	r4, r1
 8003d24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d28:	b10a      	cbz	r2, 8003d2e <_printf_common+0x26>
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	6033      	str	r3, [r6, #0]
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	0699      	lsls	r1, r3, #26
 8003d32:	bf42      	ittt	mi
 8003d34:	6833      	ldrmi	r3, [r6, #0]
 8003d36:	3302      	addmi	r3, #2
 8003d38:	6033      	strmi	r3, [r6, #0]
 8003d3a:	6825      	ldr	r5, [r4, #0]
 8003d3c:	f015 0506 	ands.w	r5, r5, #6
 8003d40:	d106      	bne.n	8003d50 <_printf_common+0x48>
 8003d42:	f104 0a19 	add.w	sl, r4, #25
 8003d46:	68e3      	ldr	r3, [r4, #12]
 8003d48:	6832      	ldr	r2, [r6, #0]
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	42ab      	cmp	r3, r5
 8003d4e:	dc2b      	bgt.n	8003da8 <_printf_common+0xa0>
 8003d50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d54:	6822      	ldr	r2, [r4, #0]
 8003d56:	3b00      	subs	r3, #0
 8003d58:	bf18      	it	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	0692      	lsls	r2, r2, #26
 8003d5e:	d430      	bmi.n	8003dc2 <_printf_common+0xba>
 8003d60:	4641      	mov	r1, r8
 8003d62:	4638      	mov	r0, r7
 8003d64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d68:	47c8      	blx	r9
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d023      	beq.n	8003db6 <_printf_common+0xae>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	6922      	ldr	r2, [r4, #16]
 8003d72:	f003 0306 	and.w	r3, r3, #6
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	bf14      	ite	ne
 8003d7a:	2500      	movne	r5, #0
 8003d7c:	6833      	ldreq	r3, [r6, #0]
 8003d7e:	f04f 0600 	mov.w	r6, #0
 8003d82:	bf08      	it	eq
 8003d84:	68e5      	ldreq	r5, [r4, #12]
 8003d86:	f104 041a 	add.w	r4, r4, #26
 8003d8a:	bf08      	it	eq
 8003d8c:	1aed      	subeq	r5, r5, r3
 8003d8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d92:	bf08      	it	eq
 8003d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	bfc4      	itt	gt
 8003d9c:	1a9b      	subgt	r3, r3, r2
 8003d9e:	18ed      	addgt	r5, r5, r3
 8003da0:	42b5      	cmp	r5, r6
 8003da2:	d11a      	bne.n	8003dda <_printf_common+0xd2>
 8003da4:	2000      	movs	r0, #0
 8003da6:	e008      	b.n	8003dba <_printf_common+0xb2>
 8003da8:	2301      	movs	r3, #1
 8003daa:	4652      	mov	r2, sl
 8003dac:	4641      	mov	r1, r8
 8003dae:	4638      	mov	r0, r7
 8003db0:	47c8      	blx	r9
 8003db2:	3001      	adds	r0, #1
 8003db4:	d103      	bne.n	8003dbe <_printf_common+0xb6>
 8003db6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dbe:	3501      	adds	r5, #1
 8003dc0:	e7c1      	b.n	8003d46 <_printf_common+0x3e>
 8003dc2:	2030      	movs	r0, #48	@ 0x30
 8003dc4:	18e1      	adds	r1, r4, r3
 8003dc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003dd0:	4422      	add	r2, r4
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003dd8:	e7c2      	b.n	8003d60 <_printf_common+0x58>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	4622      	mov	r2, r4
 8003dde:	4641      	mov	r1, r8
 8003de0:	4638      	mov	r0, r7
 8003de2:	47c8      	blx	r9
 8003de4:	3001      	adds	r0, #1
 8003de6:	d0e6      	beq.n	8003db6 <_printf_common+0xae>
 8003de8:	3601      	adds	r6, #1
 8003dea:	e7d9      	b.n	8003da0 <_printf_common+0x98>

08003dec <_printf_i>:
 8003dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df0:	7e0f      	ldrb	r7, [r1, #24]
 8003df2:	4691      	mov	r9, r2
 8003df4:	2f78      	cmp	r7, #120	@ 0x78
 8003df6:	4680      	mov	r8, r0
 8003df8:	460c      	mov	r4, r1
 8003dfa:	469a      	mov	sl, r3
 8003dfc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e02:	d807      	bhi.n	8003e14 <_printf_i+0x28>
 8003e04:	2f62      	cmp	r7, #98	@ 0x62
 8003e06:	d80a      	bhi.n	8003e1e <_printf_i+0x32>
 8003e08:	2f00      	cmp	r7, #0
 8003e0a:	f000 80d3 	beq.w	8003fb4 <_printf_i+0x1c8>
 8003e0e:	2f58      	cmp	r7, #88	@ 0x58
 8003e10:	f000 80ba 	beq.w	8003f88 <_printf_i+0x19c>
 8003e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e1c:	e03a      	b.n	8003e94 <_printf_i+0xa8>
 8003e1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e22:	2b15      	cmp	r3, #21
 8003e24:	d8f6      	bhi.n	8003e14 <_printf_i+0x28>
 8003e26:	a101      	add	r1, pc, #4	@ (adr r1, 8003e2c <_printf_i+0x40>)
 8003e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e2c:	08003e85 	.word	0x08003e85
 8003e30:	08003e99 	.word	0x08003e99
 8003e34:	08003e15 	.word	0x08003e15
 8003e38:	08003e15 	.word	0x08003e15
 8003e3c:	08003e15 	.word	0x08003e15
 8003e40:	08003e15 	.word	0x08003e15
 8003e44:	08003e99 	.word	0x08003e99
 8003e48:	08003e15 	.word	0x08003e15
 8003e4c:	08003e15 	.word	0x08003e15
 8003e50:	08003e15 	.word	0x08003e15
 8003e54:	08003e15 	.word	0x08003e15
 8003e58:	08003f9b 	.word	0x08003f9b
 8003e5c:	08003ec3 	.word	0x08003ec3
 8003e60:	08003f55 	.word	0x08003f55
 8003e64:	08003e15 	.word	0x08003e15
 8003e68:	08003e15 	.word	0x08003e15
 8003e6c:	08003fbd 	.word	0x08003fbd
 8003e70:	08003e15 	.word	0x08003e15
 8003e74:	08003ec3 	.word	0x08003ec3
 8003e78:	08003e15 	.word	0x08003e15
 8003e7c:	08003e15 	.word	0x08003e15
 8003e80:	08003f5d 	.word	0x08003f5d
 8003e84:	6833      	ldr	r3, [r6, #0]
 8003e86:	1d1a      	adds	r2, r3, #4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6032      	str	r2, [r6, #0]
 8003e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e94:	2301      	movs	r3, #1
 8003e96:	e09e      	b.n	8003fd6 <_printf_i+0x1ea>
 8003e98:	6833      	ldr	r3, [r6, #0]
 8003e9a:	6820      	ldr	r0, [r4, #0]
 8003e9c:	1d19      	adds	r1, r3, #4
 8003e9e:	6031      	str	r1, [r6, #0]
 8003ea0:	0606      	lsls	r6, r0, #24
 8003ea2:	d501      	bpl.n	8003ea8 <_printf_i+0xbc>
 8003ea4:	681d      	ldr	r5, [r3, #0]
 8003ea6:	e003      	b.n	8003eb0 <_printf_i+0xc4>
 8003ea8:	0645      	lsls	r5, r0, #25
 8003eaa:	d5fb      	bpl.n	8003ea4 <_printf_i+0xb8>
 8003eac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003eb0:	2d00      	cmp	r5, #0
 8003eb2:	da03      	bge.n	8003ebc <_printf_i+0xd0>
 8003eb4:	232d      	movs	r3, #45	@ 0x2d
 8003eb6:	426d      	negs	r5, r5
 8003eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ebc:	230a      	movs	r3, #10
 8003ebe:	4859      	ldr	r0, [pc, #356]	@ (8004024 <_printf_i+0x238>)
 8003ec0:	e011      	b.n	8003ee6 <_printf_i+0xfa>
 8003ec2:	6821      	ldr	r1, [r4, #0]
 8003ec4:	6833      	ldr	r3, [r6, #0]
 8003ec6:	0608      	lsls	r0, r1, #24
 8003ec8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ecc:	d402      	bmi.n	8003ed4 <_printf_i+0xe8>
 8003ece:	0649      	lsls	r1, r1, #25
 8003ed0:	bf48      	it	mi
 8003ed2:	b2ad      	uxthmi	r5, r5
 8003ed4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ed6:	6033      	str	r3, [r6, #0]
 8003ed8:	bf14      	ite	ne
 8003eda:	230a      	movne	r3, #10
 8003edc:	2308      	moveq	r3, #8
 8003ede:	4851      	ldr	r0, [pc, #324]	@ (8004024 <_printf_i+0x238>)
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ee6:	6866      	ldr	r6, [r4, #4]
 8003ee8:	2e00      	cmp	r6, #0
 8003eea:	bfa8      	it	ge
 8003eec:	6821      	ldrge	r1, [r4, #0]
 8003eee:	60a6      	str	r6, [r4, #8]
 8003ef0:	bfa4      	itt	ge
 8003ef2:	f021 0104 	bicge.w	r1, r1, #4
 8003ef6:	6021      	strge	r1, [r4, #0]
 8003ef8:	b90d      	cbnz	r5, 8003efe <_printf_i+0x112>
 8003efa:	2e00      	cmp	r6, #0
 8003efc:	d04b      	beq.n	8003f96 <_printf_i+0x1aa>
 8003efe:	4616      	mov	r6, r2
 8003f00:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f04:	fb03 5711 	mls	r7, r3, r1, r5
 8003f08:	5dc7      	ldrb	r7, [r0, r7]
 8003f0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f0e:	462f      	mov	r7, r5
 8003f10:	42bb      	cmp	r3, r7
 8003f12:	460d      	mov	r5, r1
 8003f14:	d9f4      	bls.n	8003f00 <_printf_i+0x114>
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d10b      	bne.n	8003f32 <_printf_i+0x146>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	07df      	lsls	r7, r3, #31
 8003f1e:	d508      	bpl.n	8003f32 <_printf_i+0x146>
 8003f20:	6923      	ldr	r3, [r4, #16]
 8003f22:	6861      	ldr	r1, [r4, #4]
 8003f24:	4299      	cmp	r1, r3
 8003f26:	bfde      	ittt	le
 8003f28:	2330      	movle	r3, #48	@ 0x30
 8003f2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f32:	1b92      	subs	r2, r2, r6
 8003f34:	6122      	str	r2, [r4, #16]
 8003f36:	464b      	mov	r3, r9
 8003f38:	4621      	mov	r1, r4
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	f8cd a000 	str.w	sl, [sp]
 8003f40:	aa03      	add	r2, sp, #12
 8003f42:	f7ff fee1 	bl	8003d08 <_printf_common>
 8003f46:	3001      	adds	r0, #1
 8003f48:	d14a      	bne.n	8003fe0 <_printf_i+0x1f4>
 8003f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4e:	b004      	add	sp, #16
 8003f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	f043 0320 	orr.w	r3, r3, #32
 8003f5a:	6023      	str	r3, [r4, #0]
 8003f5c:	2778      	movs	r7, #120	@ 0x78
 8003f5e:	4832      	ldr	r0, [pc, #200]	@ (8004028 <_printf_i+0x23c>)
 8003f60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	6831      	ldr	r1, [r6, #0]
 8003f68:	061f      	lsls	r7, r3, #24
 8003f6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f6e:	d402      	bmi.n	8003f76 <_printf_i+0x18a>
 8003f70:	065f      	lsls	r7, r3, #25
 8003f72:	bf48      	it	mi
 8003f74:	b2ad      	uxthmi	r5, r5
 8003f76:	6031      	str	r1, [r6, #0]
 8003f78:	07d9      	lsls	r1, r3, #31
 8003f7a:	bf44      	itt	mi
 8003f7c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f80:	6023      	strmi	r3, [r4, #0]
 8003f82:	b11d      	cbz	r5, 8003f8c <_printf_i+0x1a0>
 8003f84:	2310      	movs	r3, #16
 8003f86:	e7ab      	b.n	8003ee0 <_printf_i+0xf4>
 8003f88:	4826      	ldr	r0, [pc, #152]	@ (8004024 <_printf_i+0x238>)
 8003f8a:	e7e9      	b.n	8003f60 <_printf_i+0x174>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	f023 0320 	bic.w	r3, r3, #32
 8003f92:	6023      	str	r3, [r4, #0]
 8003f94:	e7f6      	b.n	8003f84 <_printf_i+0x198>
 8003f96:	4616      	mov	r6, r2
 8003f98:	e7bd      	b.n	8003f16 <_printf_i+0x12a>
 8003f9a:	6833      	ldr	r3, [r6, #0]
 8003f9c:	6825      	ldr	r5, [r4, #0]
 8003f9e:	1d18      	adds	r0, r3, #4
 8003fa0:	6961      	ldr	r1, [r4, #20]
 8003fa2:	6030      	str	r0, [r6, #0]
 8003fa4:	062e      	lsls	r6, r5, #24
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	d501      	bpl.n	8003fae <_printf_i+0x1c2>
 8003faa:	6019      	str	r1, [r3, #0]
 8003fac:	e002      	b.n	8003fb4 <_printf_i+0x1c8>
 8003fae:	0668      	lsls	r0, r5, #25
 8003fb0:	d5fb      	bpl.n	8003faa <_printf_i+0x1be>
 8003fb2:	8019      	strh	r1, [r3, #0]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	4616      	mov	r6, r2
 8003fb8:	6123      	str	r3, [r4, #16]
 8003fba:	e7bc      	b.n	8003f36 <_printf_i+0x14a>
 8003fbc:	6833      	ldr	r3, [r6, #0]
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	1d1a      	adds	r2, r3, #4
 8003fc2:	6032      	str	r2, [r6, #0]
 8003fc4:	681e      	ldr	r6, [r3, #0]
 8003fc6:	6862      	ldr	r2, [r4, #4]
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f000 f859 	bl	8004080 <memchr>
 8003fce:	b108      	cbz	r0, 8003fd4 <_printf_i+0x1e8>
 8003fd0:	1b80      	subs	r0, r0, r6
 8003fd2:	6060      	str	r0, [r4, #4]
 8003fd4:	6863      	ldr	r3, [r4, #4]
 8003fd6:	6123      	str	r3, [r4, #16]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fde:	e7aa      	b.n	8003f36 <_printf_i+0x14a>
 8003fe0:	4632      	mov	r2, r6
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	6923      	ldr	r3, [r4, #16]
 8003fe8:	47d0      	blx	sl
 8003fea:	3001      	adds	r0, #1
 8003fec:	d0ad      	beq.n	8003f4a <_printf_i+0x15e>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	079b      	lsls	r3, r3, #30
 8003ff2:	d413      	bmi.n	800401c <_printf_i+0x230>
 8003ff4:	68e0      	ldr	r0, [r4, #12]
 8003ff6:	9b03      	ldr	r3, [sp, #12]
 8003ff8:	4298      	cmp	r0, r3
 8003ffa:	bfb8      	it	lt
 8003ffc:	4618      	movlt	r0, r3
 8003ffe:	e7a6      	b.n	8003f4e <_printf_i+0x162>
 8004000:	2301      	movs	r3, #1
 8004002:	4632      	mov	r2, r6
 8004004:	4649      	mov	r1, r9
 8004006:	4640      	mov	r0, r8
 8004008:	47d0      	blx	sl
 800400a:	3001      	adds	r0, #1
 800400c:	d09d      	beq.n	8003f4a <_printf_i+0x15e>
 800400e:	3501      	adds	r5, #1
 8004010:	68e3      	ldr	r3, [r4, #12]
 8004012:	9903      	ldr	r1, [sp, #12]
 8004014:	1a5b      	subs	r3, r3, r1
 8004016:	42ab      	cmp	r3, r5
 8004018:	dcf2      	bgt.n	8004000 <_printf_i+0x214>
 800401a:	e7eb      	b.n	8003ff4 <_printf_i+0x208>
 800401c:	2500      	movs	r5, #0
 800401e:	f104 0619 	add.w	r6, r4, #25
 8004022:	e7f5      	b.n	8004010 <_printf_i+0x224>
 8004024:	080043f7 	.word	0x080043f7
 8004028:	08004408 	.word	0x08004408

0800402c <memmove>:
 800402c:	4288      	cmp	r0, r1
 800402e:	b510      	push	{r4, lr}
 8004030:	eb01 0402 	add.w	r4, r1, r2
 8004034:	d902      	bls.n	800403c <memmove+0x10>
 8004036:	4284      	cmp	r4, r0
 8004038:	4623      	mov	r3, r4
 800403a:	d807      	bhi.n	800404c <memmove+0x20>
 800403c:	1e43      	subs	r3, r0, #1
 800403e:	42a1      	cmp	r1, r4
 8004040:	d008      	beq.n	8004054 <memmove+0x28>
 8004042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800404a:	e7f8      	b.n	800403e <memmove+0x12>
 800404c:	4601      	mov	r1, r0
 800404e:	4402      	add	r2, r0
 8004050:	428a      	cmp	r2, r1
 8004052:	d100      	bne.n	8004056 <memmove+0x2a>
 8004054:	bd10      	pop	{r4, pc}
 8004056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800405a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800405e:	e7f7      	b.n	8004050 <memmove+0x24>

08004060 <_sbrk_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	2300      	movs	r3, #0
 8004064:	4d05      	ldr	r5, [pc, #20]	@ (800407c <_sbrk_r+0x1c>)
 8004066:	4604      	mov	r4, r0
 8004068:	4608      	mov	r0, r1
 800406a:	602b      	str	r3, [r5, #0]
 800406c:	f7fc ff28 	bl	8000ec0 <_sbrk>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d102      	bne.n	800407a <_sbrk_r+0x1a>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	b103      	cbz	r3, 800407a <_sbrk_r+0x1a>
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	20000ad0 	.word	0x20000ad0

08004080 <memchr>:
 8004080:	4603      	mov	r3, r0
 8004082:	b510      	push	{r4, lr}
 8004084:	b2c9      	uxtb	r1, r1
 8004086:	4402      	add	r2, r0
 8004088:	4293      	cmp	r3, r2
 800408a:	4618      	mov	r0, r3
 800408c:	d101      	bne.n	8004092 <memchr+0x12>
 800408e:	2000      	movs	r0, #0
 8004090:	e003      	b.n	800409a <memchr+0x1a>
 8004092:	7804      	ldrb	r4, [r0, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	428c      	cmp	r4, r1
 8004098:	d1f6      	bne.n	8004088 <memchr+0x8>
 800409a:	bd10      	pop	{r4, pc}

0800409c <memcpy>:
 800409c:	440a      	add	r2, r1
 800409e:	4291      	cmp	r1, r2
 80040a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80040a4:	d100      	bne.n	80040a8 <memcpy+0xc>
 80040a6:	4770      	bx	lr
 80040a8:	b510      	push	{r4, lr}
 80040aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040ae:	4291      	cmp	r1, r2
 80040b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040b4:	d1f9      	bne.n	80040aa <memcpy+0xe>
 80040b6:	bd10      	pop	{r4, pc}

080040b8 <_realloc_r>:
 80040b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040bc:	4680      	mov	r8, r0
 80040be:	4615      	mov	r5, r2
 80040c0:	460c      	mov	r4, r1
 80040c2:	b921      	cbnz	r1, 80040ce <_realloc_r+0x16>
 80040c4:	4611      	mov	r1, r2
 80040c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ca:	f7ff bc39 	b.w	8003940 <_malloc_r>
 80040ce:	b92a      	cbnz	r2, 80040dc <_realloc_r+0x24>
 80040d0:	f7ff fbcc 	bl	800386c <_free_r>
 80040d4:	2400      	movs	r4, #0
 80040d6:	4620      	mov	r0, r4
 80040d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040dc:	f000 f81a 	bl	8004114 <_malloc_usable_size_r>
 80040e0:	4285      	cmp	r5, r0
 80040e2:	4606      	mov	r6, r0
 80040e4:	d802      	bhi.n	80040ec <_realloc_r+0x34>
 80040e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80040ea:	d8f4      	bhi.n	80040d6 <_realloc_r+0x1e>
 80040ec:	4629      	mov	r1, r5
 80040ee:	4640      	mov	r0, r8
 80040f0:	f7ff fc26 	bl	8003940 <_malloc_r>
 80040f4:	4607      	mov	r7, r0
 80040f6:	2800      	cmp	r0, #0
 80040f8:	d0ec      	beq.n	80040d4 <_realloc_r+0x1c>
 80040fa:	42b5      	cmp	r5, r6
 80040fc:	462a      	mov	r2, r5
 80040fe:	4621      	mov	r1, r4
 8004100:	bf28      	it	cs
 8004102:	4632      	movcs	r2, r6
 8004104:	f7ff ffca 	bl	800409c <memcpy>
 8004108:	4621      	mov	r1, r4
 800410a:	4640      	mov	r0, r8
 800410c:	f7ff fbae 	bl	800386c <_free_r>
 8004110:	463c      	mov	r4, r7
 8004112:	e7e0      	b.n	80040d6 <_realloc_r+0x1e>

08004114 <_malloc_usable_size_r>:
 8004114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004118:	1f18      	subs	r0, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfbc      	itt	lt
 800411e:	580b      	ldrlt	r3, [r1, r0]
 8004120:	18c0      	addlt	r0, r0, r3
 8004122:	4770      	bx	lr

08004124 <_init>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	bf00      	nop
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr

08004130 <_fini>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	bf00      	nop
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr
